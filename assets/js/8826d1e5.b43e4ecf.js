(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2047],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return m}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),d=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=d(e.components);return i.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,f=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return n?i.createElement(f,r(r({ref:t},s),{},{components:n})):i.createElement(f,r({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var d=2;d<o;d++)r[d]=n[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8329:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return r},metadata:function(){return l},toc:function(){return p},default:function(){return s}});var i=n(2122),a=n(9756),o=(n(7294),n(3905)),r={},l={unversionedId:"Modules/Notify",id:"Modules/Notify",isDocsHomePage:!1,title:"Notify",description:"Set up and Initialize SDK",source:"@site/docs/Modules/Notify.md",sourceDirName:"Modules",slug:"/Modules/Notify",permalink:"/react-native-bildit-flybuy/docs/Modules/Notify",editUrl:"https://github.com/bildit-Platform/react-native-bildit-flybuy/edit/main/website/docs/Modules/Notify.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LiveStatus",permalink:"/react-native-bildit-flybuy/docs/Modules/LiveStatus"},next:{title:"Customers",permalink:"/react-native-bildit-flybuy/docs/Components/Customers"}},p=[{value:"Set up and Initialize SDK",id:"set-up-and-initialize-sdk",children:[{value:"Module Installation",id:"module-installation",children:[]},{value:"Native Initialization",id:"native-initialization",children:[]}]},{value:"Create for Sites in Region",id:"create-for-sites-in-region",children:[]},{value:"Clear Notifications",id:"clear-notifications",children:[]},{value:"Create for Sites",id:"create-for-sites",children:[]},{value:"Sync Notify Campaign Data",id:"sync-notify-campaign-data",children:[]},{value:"Background Data Refresh (iOS only)",id:"background-data-refresh-ios-only",children:[]},{value:"Handle Notification Response",id:"handle-notification-response",children:[{value:"Configuration",id:"configuration",children:[]},{value:"Usage",id:"usage",children:[]}]}],d={toc:p};function s(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"set-up-and-initialize-sdk"},"Set up and Initialize SDK"),(0,o.kt)("p",null,"The Flybuy SDK must be initialized when the application starts in order to configure the app authorization token and handle appropriate lifecycle methods."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Important:")," Complete all steps in the Android and iOS ",(0,o.kt)("a",{parentName:"p",href:"/react-native-bildit-flybuy/docs/Setup#installation"},"Setup guides"),"."),(0,o.kt)("h3",{id:"module-installation"},"Module Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npm install react-native-bildit-flybuy-notify\n\ncd ios && pod install\n")),(0,o.kt)("h3",{id:"native-initialization"},"Native Initialization"),(0,o.kt)("h4",{id:"android"},"Android"),(0,o.kt)("p",null,"Modify ",(0,o.kt)("inlineCode",{parentName:"p"},"android/app/build.gradle")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gradle"},"  dependencies {\n      // .. other dependencies\n\n      // Add below dependencies\n      implementation platform(\"com.radiusnetworks.flybuy:bom:$flybuyVersion\")\n      implementation('com.radiusnetworks.flybuy:core')\n      implementation('com.radiusnetworks.flybuy:notify') // add this line\n  }\n")),(0,o.kt)("p",null,"Modify ",(0,o.kt)("inlineCode",{parentName:"p"},"MainApplication.kt")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'import com.radiusnetworks.flybuy.sdk.ConfigOptions\nimport com.radiusnetworks.flybuy.sdk.FlyBuyCore\nimport com.radiusnetworks.flybuy.sdk.notify.NotifyManager // <-- add this import\n\n\nclass MainApplication : Application(), ReactApplication {\n  override fun onCreate() {\n    super.onCreate()\n    SoLoader.init(this, false)\n    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n      // If you opted-in for the New Architecture, we load the native entry point for this app.\n      load()\n    }\n\n    // Native configure\n    val configOptions = ConfigOptions.Builder("YourFlyBuyToken")\n      .build()\n    FlyBuyCore.configure(this, configOptions)\n\n   // Native configuration for FlyBuy Notify\n    NotifyManager.getInstance().configure(applicationContext) // add this line\n  }\n}\n')),(0,o.kt)("h4",{id:"ios"},"iOS"),(0,o.kt)("p",null,"Modify ",(0,o.kt)("inlineCode",{parentName:"p"},"iOS/yourproject/AppDelegate.mm")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},"\n// Add this import and make sure CoreLocation import always above FlyBuy import\n#import <CoreLocation/CoreLocation.h>\n#import <FlyBuy/FlyBuy-Swift.h>\n#import <FlyBuyNotify/FlyBuyNotify-Swift.h> // add this line\n\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'\n// below FlyBuy Core configuration\n// Notify native configure\n[[FlyBuyNotifyManager shared] configureWithBgTaskIdentifier:@"notifyBgTaskId" bgSyncCallback:^(NSError *error) {\n    if (error == nil) {\n      NSLog(@"Notify campaign content updated via a background task");\n    } else {\n      NSLog(@"Notify Background Sync Error: %@", error.description);\n    }\n  }];\n')),(0,o.kt)("h2",{id:"create-for-sites-in-region"},"Create for Sites in Region"),(0,o.kt)("p",null,"Call this method to create a notification for a list of sites in a given circular region (latitude, longitude, and radius). This will clear any previously set notifications and create a new notification for the region."),(0,o.kt)("h4",{id:"params"},"Params"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Example"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"region"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"../Types/CircularRegion"},(0,o.kt)("inlineCode",{parentName:"a"},"CircularRegion"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"{ latitude: 47.6234207, longitude: -122.3300605, radius: 100 }"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"notification"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"../Types/NotificationInfo"},(0,o.kt)("inlineCode",{parentName:"a"},"NotificationInfo"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"{ title: 'Test Notification', message: 'Test Notification message', data: { key1: 'value1', key2: 'value2' }}"))))),(0,o.kt)("h4",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import * as FlyBuyNotify from 'react-native-bildit-flybuy-notify';\n\nconst region = {\n  latitude: 47.6234207,\n  longitude: -122.3300605,\n  radius: 100,\n};\n\nconst notification = {\n  title: 'Test Notification',\n  message: 'Test Notification message',\n  data: {\n    key1: 'value',\n    key2: 'value',\n  },\n};\n\nFlyBuyNotify.createForSitesInRegion(region, notification);\n")),(0,o.kt)("h2",{id:"clear-notifications"},"Clear Notifications"),(0,o.kt)("p",null,"Clear all geofence notifications."),(0,o.kt)("h4",{id:"params-1"},"Params"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"None"),(0,o.kt)("td",{parentName:"tr",align:null},"None")))),(0,o.kt)("h4",{id:"example-1"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"FlyBuyNotify.clearNotifications();\n")),(0,o.kt)("h2",{id:"create-for-sites"},"Create for Sites"),(0,o.kt)("p",null,"Create geofence notification for list of sites."),(0,o.kt)("h4",{id:"params-2"},"Params"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Example"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"notification"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"../Types/NotificationInfo"},(0,o.kt)("inlineCode",{parentName:"a"},"NotificationInfo"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"{ title: 'Test Notification', message: 'Test Notification message', data: { key1: 'value', key2: 'value' }}"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"sites"),(0,o.kt)("td",{parentName:"tr",align:null},"[",(0,o.kt)("a",{parentName:"td",href:"../Types/Site"},(0,o.kt)("inlineCode",{parentName:"a"},"Site")),"]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"[{},...]"))))),(0,o.kt)("h4",{id:"example-2"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const notification = {\n  title: 'Test Notification',\n  message: 'Test Notification message',\n  data: {\n    key1: 'value',\n    key2: 'value',\n  },\n};\n\nconst sites = [\n  {\n    id: 15942,\n    name: 'Test Site',\n    phone: '333-333-3333',\n    streetAddress: null,\n    fullAddress: '500 Yale Ave N, Seattle, WA 98109, USA',\n    locality: null,\n    region: null,\n    country: null,\n    postalCode: null,\n    latitude: '47.6234207',\n    longitude: '-122.3300605',\n    coverPhotoUrl: null,\n    iconUrl: null,\n    instructions: '',\n    description: '',\n    partnerIdentifier: '001',\n  },\n];\n\nFlyBuyNotify.createForSites(sites, notification);\n")),(0,o.kt)("h2",{id:"sync-notify-campaign-data"},"Sync Notify Campaign Data"),(0,o.kt)("p",null,"Notify ",(0,o.kt)("inlineCode",{parentName:"p"},"sync")," method is provided as a development tool, in production applications it should not be called. The SDK will automatically sync data with the Flybuy portal. However the schedule used by the SDK may not be conducive to testing and development iterations."),(0,o.kt)("h4",{id:"params-3"},"Params"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Example"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"force"),(0,o.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"true"))))),(0,o.kt)("h4",{id:"example-3"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"FlyBuyNotify.sync(true);\n")),(0,o.kt)("h1",{id:"todo-check-all-sections-below"},"TODO: check all sections below"),(0,o.kt)("h2",{id:"background-data-refresh-ios-only"},"Background Data Refresh (iOS only)"),(0,o.kt)("p",null,"Notify Campaigns require the background fetch capability to be enabled in the target settings.\n",(0,o.kt)("img",{parentName:"p",src:"https://www.radiusnetworks.com/developers/flybuy/sdk-2.0/img/notify_0.png",alt:"An old rock in the desert"})),(0,o.kt)("p",null,"After that, you can follow this steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Modify your ",(0,o.kt)("inlineCode",{parentName:"p"},"AppDelegate.h")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-objc"},"#import <React/RCTBridgeDelegate.h>\n#import <UIKit/UIKit.h>\n#import <UserNotifications/UserNotifications.h> // <-- add this\n\n// Add UNUserNotificationCenterDelegate\n@interface AppDelegate : UIResponder <UIApplicationDelegate, RCTBridgeDelegate, UNUserNotificationCenterDelegate>\n\n.... \n\n@end\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Modify your ",(0,o.kt)("inlineCode",{parentName:"p"},"AppDelegate.m")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'\n  #import "AppDelegate.h"\n\n  ... other imports\n  #import <react-native-bildit-flybuy/Flybuy-Bridging-Header.h> // <-- add this line\n\n    - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n    {\n      ...\n      RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n      RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge\n                                                      moduleName:@"FlybuyExample"\n                                                initialProperties:nil];\n      \n      // ------ Add this block\n      UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];\n      center.delegate = self;\n      // ------\n      \n      ...\n      return YES;\n    }\n\n    // ----- Add this block\n    - (void)application:(UIApplication *)application\n    performFetchWithCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler {\n      [[Flybuy shared] performFetchWithCompletionHandler:completionHandler];\n    }\n    // ------\n')))),(0,o.kt)("h2",{id:"handle-notification-response"},"Handle Notification Response"),(0,o.kt)("h3",{id:"configuration"},"Configuration"),(0,o.kt)("h4",{id:"ios-1"},"iOS"),(0,o.kt)("p",null,"  Modify your ",(0,o.kt)("inlineCode",{parentName:"p"},"AppDelegate.m")," "),(0,o.kt)("p",null,"  Please make sure to import ",(0,o.kt)("inlineCode",{parentName:"p"},"#import <react-native-bildit-flybuy/Flybuy-Bridging-Header.h>")," and make this changes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},"  - (void)userNotificationCenter:(UNUserNotificationCenter *)center\n    didReceiveNotificationResponse:(UNNotificationResponse *)response\n            withCompletionHandler:(void (^)(void))completionHandler {\n      [[Flybuy shared] handleNotificationResponse:response];\n    }\n\n  // Enables app to receive notifications while in the foreground\n  - (void)userNotificationCenter:(UNUserNotificationCenter *)center\n        willPresentNotification:(UNNotification *)notification\n          withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler {\n    completionHandler(UNAuthorizationOptionSound | UNAuthorizationOptionAlert | UNAuthorizationOptionBadge);\n  }\n\n")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Please make sure to request notification permission on your app to properly receive any local notification from FlyBuy."))),(0,o.kt)("h4",{id:"android-1"},"Android"),(0,o.kt)("p",null,"  No changes needed."),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Set up event listeners to get updates about notification metadata."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"React.useEffect(() => {\n  const notifyEventListener = FlyBuy.eventEmitter.addListener(\n    'notifyEvents',\n    (event) => {\n      console.log('notify event', event);\n    }\n  );\n\n  return () => {\n    notifyEventListener.remove();\n  };\n}, []);\n")))}s.isMDXComponent=!0}}]);
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef FLYBUY_SWIFT_H
#define FLYBUY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FlyBuy",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC6FlyBuy10AppUpgrade")
@interface AppUpgrade : NSObject
@end


/// Data model for a list of <code>Beacon</code>s
SWIFT_CLASS_NAMED("BeaconList")
@interface FlyBuyBeaconList : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class FlyBuyCustomerInfo;

/// Data model with information for claiming an order.
SWIFT_CLASS_NAMED("ClaimOrderInfo")
@interface FlyBuyClaimOrderInfo : NSObject
- (nonnull instancetype)initWithCustomerCarColor:(NSString * _Nullable)customerCarColor customerCarType:(NSString * _Nullable)customerCarType customerLicensePlate:(NSString * _Nullable)customerLicensePlate customerName:(NSString * _Nullable)customerName customerPhone:(NSString * _Nullable)customerPhone pushToken:(NSString * _Nonnull)pushToken OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCustomerInfo:(FlyBuyCustomerInfo * _Nonnull)customerInfo pushToken:(NSString * _Nonnull)pushToken pickupType:(NSString * _Nullable)pickupType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FlyBuyOrdersManager;
@class FlyBuyCustomerManager;
@class FlyBuySitesManager;
@class FlyBuyLogger;

/// The main access point for Core functionality
/// See <a href="https://www.radiusnetworks.com/developers/flybuy/#/">Flybuy Developer Docs</a> for additional details including all setup steps.
/// Example:
/// \code
/// FlyBuy.Core.configure(["token": "TOKEN_HERE"])
///
/// \endcode
SWIFT_CLASS_NAMED("Core")
@interface FlyBuyCore : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Gets the <code>OrdersManager</code> instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlyBuyOrdersManager * _Nonnull orders;)
+ (FlyBuyOrdersManager * _Nonnull)orders SWIFT_WARN_UNUSED_RESULT;
/// Gets the <code>CustomerManager</code> instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlyBuyCustomerManager * _Nonnull customer;)
+ (FlyBuyCustomerManager * _Nonnull)customer SWIFT_WARN_UNUSED_RESULT;
/// Gets the <code>SitesManager</code> instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlyBuySitesManager * _Nonnull sites;)
+ (FlyBuySitesManager * _Nonnull)sites SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlyBuyLogger * _Nonnull logger;)
+ (FlyBuyLogger * _Nonnull)logger SWIFT_WARN_UNUSED_RESULT;
/// Configures FlyBuy with the given options
/// See <a href="https://www.radiusnetworks.com/developers/flybuy/#/">Flybuy Developer Docs</a> for additional details including all setup steps.
/// Example:
/// \code
/// FlyBuy.configure(["token": "TOKEN_HERE"])
///
/// \endcode
+ (void)configure:(NSDictionary<NSString *, id> * _Nonnull)opts;
/// handles a remote notification which may contain FlyBuy order data
/// \param data contains the <code>userInfo</code> data from a remote notification
///
+ (void)handleRemoteNotification:(NSDictionary * _Nonnull)data;
/// Updates the push token that FlyBuy uses to send push messages to the app.
+ (void)updatePushToken:(NSString * _Nonnull)newPushToken;
/// Updates the APNs device token that FlyBuy uses to send pushes to the app. This should only be used
/// when FlyBuy is configured to send pushes through APNs directly. If using a 3rd party service such as
/// Airship, OneSignal, etc, the correct method to call is <code>updatePushToken</code>.
+ (void)updateAPNPushToken:(NSData * _Nonnull)deviceToken;
@end



/// Data model with information for creating an order.
SWIFT_CLASS("_TtC6FlyBuy15CreateOrderInfo")
@interface CreateOrderInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Data model for customers
SWIFT_CLASS_NAMED("Customer")
@interface FlyBuyCustomer : NSObject
@property (nonatomic, readonly) NSInteger id;
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
@property (nonatomic, readonly, copy) NSString * _Nullable emailAddress;
@property (nonatomic, readonly, strong) FlyBuyCustomerInfo * _Nonnull info;
@property (nonatomic, readonly) BOOL registered;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Data model containing info terms of service consent and age verification.
SWIFT_CLASS_NAMED("CustomerConsent")
@interface FlyBuyCustomerConsent : NSObject
@property (nonatomic, readonly) BOOL termsOfService;
@property (nonatomic, readonly) BOOL ageVerification;
- (nonnull instancetype)initWithTermsOfService:(BOOL)termsOfService ageVerification:(BOOL)ageVerification OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Data model to contain the customer’s info.
SWIFT_CLASS_NAMED("CustomerInfo")
@interface FlyBuyCustomerInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nullable carType;
@property (nonatomic, readonly, copy) NSString * _Nullable carColor;
@property (nonatomic, readonly, copy) NSString * _Nullable licensePlate;
@property (nonatomic, readonly, copy) NSString * _Nullable phone;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name carType:(NSString * _Nullable)carType carColor:(NSString * _Nullable)carColor licensePlate:(NSString * _Nullable)licensePlate phone:(NSString * _Nullable)phone OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Manager for customer operations: creating, storing, updating, signing-out
SWIFT_CLASS_NAMED("CustomerManager")
@interface FlyBuyCustomerManager : NSObject
/// Gets the current logged in customer.
@property (nonatomic, readonly, strong) FlyBuyCustomer * _Nullable current;
/// Create a customer account using customerInfo from the user.
/// Consent for termsOfService and ageVerification should be collected from the user (e.g. checkboxes).
/// note:
/// The phone parameter is optional when creating a <code>CustomerInfo</code>. Set it to an empty string (“”) if not used.
/// important:
/// If the termsOfService and ageVerification parameters are not true, an error will be returned and the customer will not be created.
/// Example:
/// \code
/// // Create the customer info struct
/// let customerInfo = FlyBuy.CustomerInfo(
///   name: "Marty McFly",
///   carType: "DeLorean",
///   carColor: "Silver",
///   licensePlate: "OUTATIME",
///   phone: "555-5555"
/// )
///
/// // Post it to the API
/// FlyBuy.Core.customer.create(customerInfo, termsOfService: userAcceptedTerms, ageVerification: userVerifiedAge) { (customer, error) -> (Void) in
///   if let error = error {
///     // Handle error
///   } else {
///     // Handle success
///   }
/// }
///
/// \endcode\param customerInfo contains the customer details
///
/// \param termsOfService user has accepted the terms of service
///
/// \param ageVerification user is of age to provide consent
///
/// \param callback Called with the new <code>Customer</code> or any error encountered. Optional.
///
- (void)create:(FlyBuyCustomerInfo * _Nonnull)customerInfo termsOfService:(BOOL)termsOfService ageVerification:(BOOL)ageVerification callback:(void (^ _Nullable)(FlyBuyCustomer * _Nullable, NSError * _Nullable))callback;
/// Create a customer account with login.
/// Create a customer account with email and password using information from the user. Consent should be collected from the user (e.g. checkboxes).
/// important:
/// If the termsOfService and ageVerification parameters are not true, an error will be returned and the customer will not be created.
/// Example:
/// \code
/// // Create the customer info struct
/// let customerInfo = FlyBuy.CustomerInfo(
///   name: "Marty McFly",
///   carType: "DeLorean",
///   carColor: "Silver",
///   licensePlate: "OUTATIME",
///   phone: "555-5555"
/// )
///
/// let consent = FlyBuy.CustomerConsent(termsOfService: termsOfService, ageVerification: ageVerification)
///
/// // Post it to the API
/// FlyBuy.Core.customer.create(customerInfo, email: "test@example.com", password: "password", customerConsent: consent) { (customer, error) -> (Void) in
///   if let error = error {
///     // Handle error
///   } else {
///     // Handle success
///   }
/// }
///
/// \endcode\param customerInfo contains the customer details
///
/// \param email email provided by the user
///
/// \param password password provided by the user
///
/// \param customerConsent contains the values of ‘termsOfService’ and ‘ageVerification’
///
/// \param callback Called with the new <code>Customer</code> or any error encountered. Optional.
///
- (void)create:(FlyBuyCustomerInfo * _Nonnull)customerInfo email:(NSString * _Nonnull)email password:(NSString * _Nonnull)password customerConsent:(FlyBuyCustomerConsent * _Nonnull)customerConsent callback:(void (^ _Nullable)(FlyBuyCustomer * _Nullable, NSError * _Nullable))callback;
/// Update customer info for the logged in user
/// Example:
/// \code
/// let customerInfo = FlyBuy.CustomerInfo(
///   name: "Marty McFly",
///   carType: "DeLorean",
///   carColor: "Silver",
///   licensePlate: "OUTATIME",
///   phone: "555-5555"
/// )
///
/// FlyBuy.Core.customer.update(customerInfo) { (customer, error) -> (Void) in
///   if let error = error {
///     // Handle error
///   } else {
///     // Handle success
///   }
/// }
///
/// \endcode\param customerInfo contains the updated customer details
///
/// \param callback Called with the updated <code>Customer</code> or any error encountered. Optional.
///
- (void)update:(FlyBuyCustomerInfo * _Nonnull)customerInfo callback:(void (^ _Nullable)(FlyBuyCustomer * _Nullable, NSError * _Nullable))callback;
/// Login customer using existing credentials (email and password).
/// Example:
/// \code
/// FlyBuy.Core.customer.login("test@example.com", "password") { (customer, error) -> (Void) in
///   if let error = error {
///     // Handle error
///   } else {
///     // Handle success
///   }
/// }
///
/// \endcode\param emailAddress the account email
///
/// \param password the account password
///
/// \param callback Called with the  <code>Customer</code> or any error encountered. Optional.
///
- (void)loginWithEmailAddress:(NSString * _Nonnull)emailAddress password:(NSString * _Nonnull)password callback:(void (^ _Nullable)(FlyBuyCustomer * _Nullable, NSError * _Nullable))callback;
/// Login the user with a previously obtained customer token
/// Example:
/// \code
/// FlyBuy.Core.customer.loginWithToken(token: "token") { (customer, error) -> (Void) in
///   if let error = error {
///     // Handle error
///   } else {
///     // Handle success
///   }
/// }
///
/// \endcode\param token the account token
///
/// \param callback Called with the  <code>Customer</code> or any error encountered. Optional.
///
- (void)loginWithTokenWithToken:(NSString * _Nonnull)token callback:(void (^ _Nullable)(FlyBuyCustomer * _Nullable, NSError * _Nullable))callback;
/// Link an email and password with the current anonymous logged in user.
/// This converts the current customer (an anonymous account) to a registered account
/// Example:
/// \code
/// FlyBuy.Core.customer.loginWithToken(token: "token") { (customer, error) -> (Void) in
///   if let error = error {
///     // Handle error
///   } else {
///     // Handle success
///   }
/// }
///
/// \endcode\param emailAddress the account email
///
/// \param password the account password
///
/// \param callback Called with the  <code>Customer</code> or any error encountered. Optional.
///
- (void)signUpWithEmailAddress:(NSString * _Nonnull)emailAddress password:(NSString * _Nonnull)password callback:(void (^ _Nullable)(FlyBuyCustomer * _Nullable, NSError * _Nullable))callback;
/// Request password reset for an email address
/// Example:
/// \code
/// FlyBuy.Core.customer.requestNewPassword(emailAddress: "test@example.com") { (error) -> (Void) in
///  if let error = error {
///    // Handle error
///  } else {
///    // Handle success
///  }
/// }
///
/// \endcode\param emailAddress the account email
///
/// \param callback Called with any error encountered. Optional.
///
- (void)requestNewPasswordWithEmailAddress:(NSString * _Nonnull)emailAddress callback:(void (^ _Nullable)(NSError * _Nullable))callback;
/// Perform password change for an email address
/// \param resetPasswordToken the token for the new password
///
/// \param password the account password
///
/// \param confirmation the account password confirmation
///
/// \param callback Called with the  <code>Customer</code> or any error encountered. Optional.
///
- (void)setNewPasswordWithResetPasswordToken:(NSString * _Nonnull)resetPasswordToken password:(NSString * _Nonnull)password confirmation:(NSString * _Nonnull)confirmation callback:(void (^ _Nullable)(FlyBuyCustomer * _Nullable, NSError * _Nullable))callback;
/// Logs out the current customer
/// Example:
/// \code
/// FlyBuy.Core.customer.logout()
///
/// \endcode
- (void)logout;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum CustomerManagerErrorType : NSInteger;

/// Error that may be returned from CustomerManager methods.
SWIFT_CLASS_NAMED("CustomerManagerError")
@interface FlyBuyCustomerManagerError : NSObject
/// Returns the string describing the error type.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription SWIFT_DEPRECATED_MSG("Please use 'description' instead.");
/// Specifies the error type and contains a description of the error.
@property (nonatomic, readonly) enum CustomerManagerErrorType type;
/// Returns the string describing the error type.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The type that may be associated with a CustomerManagerError.
typedef SWIFT_ENUM(NSInteger, CustomerManagerErrorType, open) {
  CustomerManagerErrorTypeLoadingApiUrl = 0,
  CustomerManagerErrorTypeLoadingCustomer = 1,
  CustomerManagerErrorTypeMissingCustomerConsent = 2,
  CustomerManagerErrorTypeCoreIsNotConfigured = 3,
};


enum FlyBuyAPIErrorType : NSInteger;

/// When an API error occurs, this error is returned. The statusCode contains the HTTP status code from the API response.
SWIFT_CLASS_NAMED("FlyBuyAPIError")
@interface FlyBuyAPIError : NSObject
@property (nonatomic, readonly) enum FlyBuyAPIErrorType type;
@property (nonatomic, readonly) NSInteger statusCodeInt;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The type that may be associated with a FlyBuyAPIError.
typedef SWIFT_ENUM(NSInteger, FlyBuyAPIErrorType, open) {
  FlyBuyAPIErrorTypeInvalidResponse = 0,
  FlyBuyAPIErrorTypeResponseError = 1,
};


/// Data model representing a geofence.
SWIFT_CLASS_NAMED("Geofence")
@interface FlyBuyGeofence : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull latitude;
@property (nonatomic, readonly, copy) NSString * _Nonnull longitude;
@property (nonatomic, readonly) double radiusMeters;
@end


typedef SWIFT_ENUM(NSInteger, LocationAuthStatus, open) {
  LocationAuthStatusNotDetermined = 0,
  LocationAuthStatusRestricted = 1,
  LocationAuthStatusDenied = 2,
  LocationAuthStatusAuthorizedAlways = 3,
  LocationAuthStatusAuthorizedWhenInUse = 4,
};

typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelVerbose = 0,
  LogLevelDebug = 1,
  LogLevelInfo = 2,
  LogLevelWarning = 3,
  LogLevelError = 4,
  LogLevelNone = 5,
};


SWIFT_CLASS_NAMED("Logger")
@interface FlyBuyLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC6FlyBuy12NotifyConfig")
@interface NotifyConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FlyBuyPickupWindow;
@class NSNumber;
@class CLLocation;

/// Data model for orders.
SWIFT_CLASS_NAMED("Order")
@interface FlyBuyOrder : NSObject
@property (nonatomic, readonly) NSInteger id;
@property (nonatomic, readonly) NSInteger siteID;
@property (nonatomic, copy) NSString * _Nonnull state;
@property (nonatomic, copy) NSString * _Nonnull customerState;
@property (nonatomic, readonly, copy) NSString * _Nullable partnerIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nullable redemptionCode;
@property (nonatomic, readonly, copy) NSDate * _Nullable redeemedAt;
@property (nonatomic, readonly, copy) NSString * _Nullable displayName;
@property (nonatomic, readonly, strong) FlyBuyPickupWindow * _Nullable pickupWindow;
@property (nonatomic, copy) NSString * _Nullable pickupType;
@property (nonatomic, copy) NSDate * _Nullable etaAt;
@property (nonatomic, copy) NSDate * _Nullable completedAt;
@property (nonatomic, copy) NSDate * _Nullable createdAt;
@property (nonatomic, copy) NSDate * _Nullable updatedAt;
@property (nonatomic, copy) NSString * _Nullable customerRating;
@property (nonatomic, copy) NSString * _Nullable customerComment;
@property (nonatomic, readonly, copy) NSString * _Nullable siteName;
@property (nonatomic, readonly, copy) NSString * _Nullable sitePhone;
@property (nonatomic, readonly, copy) NSString * _Nullable siteStreetAddress;
@property (nonatomic, readonly, copy) NSString * _Nullable siteFullAddress;
@property (nonatomic, readonly, copy) NSString * _Nullable siteLocality;
@property (nonatomic, readonly, copy) NSString * _Nullable siteRegion;
@property (nonatomic, readonly, copy) NSString * _Nullable siteCountry;
@property (nonatomic, readonly, copy) NSString * _Nullable sitePostalCode;
@property (nonatomic, readonly, copy) NSString * _Nullable siteLongitude;
@property (nonatomic, readonly, copy) NSString * _Nullable siteLatitude;
@property (nonatomic, readonly, copy) NSString * _Nullable siteInstructions;
@property (nonatomic, readonly, copy) NSString * _Nullable siteDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable siteCoverPhotoURL;
@property (nonatomic, readonly, copy) NSString * _Nullable sitePartnerIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nullable projectAccentColor;
@property (nonatomic, readonly, copy) NSString * _Nullable projectAccentTextColor;
@property (nonatomic, readonly, copy) NSString * _Nullable projectLogoURL;
@property (nonatomic, readonly, copy) NSString * _Nullable customerName;
@property (nonatomic, readonly, copy) NSString * _Nullable customerCarType;
@property (nonatomic, readonly, copy) NSString * _Nullable customerCarColor;
@property (nonatomic, readonly, copy) NSString * _Nullable customerLicensePlate;
@property (nonatomic, readonly) BOOL projectMobileFlowAlwaysShowVehicleInfoFields;
@property (nonatomic, readonly) BOOL projectMobileFlowCustomerNameEditingEnabled;
@property (nonatomic, readonly) BOOL projectMobileFlowPickupTypeSelectionEnabled;
@property (nonatomic, readonly) BOOL projectMobileFlowRequireVehicleInfoIfVisible;
@property (nonatomic, readonly, copy) NSString * _Nullable curbsideLocalizedString;
@property (nonatomic, readonly, copy) NSString * _Nullable pickupLocalizedString;
@property (nonatomic, copy) NSString * _Nullable pushToken;
@property (nonatomic, copy) NSString * _Nullable spotIdentifer;
@property (nonatomic, copy) NSString * _Nullable spotIdentifierInputType;
@property (nonatomic, readonly, copy) NSString * _Nullable partnerIdentifierForCustomer;
@property (nonatomic, readonly, copy) NSString * _Nullable partnerIdentifierForCrew;
@property (nonatomic, readonly) BOOL wrongSiteDetectionEnabled;
@property (nonatomic, readonly) BOOL distanceFilteringDisabled;
@property (nonatomic, readonly, strong) NSNumber * _Nullable wrongSiteSearchRadius;
/// Gets the location of the order’s associated site.
- (CLLocation * _Nullable)siteLocation SWIFT_WARN_UNUSED_RESULT;
/// Gets the distance between the location and the site in meters.
- (NSNumber * _Nullable)siteDistanceFrom:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) NSNumber * _Nullable customerID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





SWIFT_CLASS_NAMED("OrderEvent")
@interface FlyBuyOrderEvent : NSObject
- (nonnull instancetype)initWithOrderID:(NSInteger)orderID customerState:(NSString * _Nonnull)customerState etaSeconds:(NSNumber * _Nullable)etaSeconds OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOrderID:(NSInteger)orderID customerState:(NSString * _Nonnull)customerState spotIdentifier:(NSString * _Nullable)spotIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOrderID:(NSInteger)orderID state:(NSString * _Nonnull)state OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOrderID:(NSInteger)orderID locationAuthStatus:(enum LocationAuthStatus)locationAuthStatus OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOrderID:(NSInteger)orderID customerRating:(NSInteger)customerRating customerComments:(NSString * _Nullable)customerComments OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Manager for order operations
/// Allows fetching the list of orders, creating a new order, or creating
/// order events.
SWIFT_CLASS_NAMED("OrdersManager")
@interface FlyBuyOrdersManager : NSObject
/// Gets all orders for the current customer.
@property (nonatomic, readonly, copy) NSArray<FlyBuyOrder *> * _Nonnull all;
/// Gets open orders for the current customer.
@property (nonatomic, readonly, copy) NSArray<FlyBuyOrder *> * _Nonnull open;
/// Gets closed orders for the current customer.
@property (nonatomic, readonly, copy) NSArray<FlyBuyOrder *> * _Nonnull closed;
/// The full list of possible order states.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull orderStates;
/// The full list of possible customer states.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull customerStates;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Fetches the list of orders from the FlyBuy web API
/// Fetch the latest claimed orders with the server. An <code>Order</code> is claimed if it is associated with the current customer. Most of the time this method does not need to be called by the app except for refreshing an order list.
/// Example:
/// \code
/// FlyBuy.Core.orders.fetch() { (orders, error) -> (Void) in
///   if let error = error {
///     // Handle error
///   } else {
///     // Handle success
///   }
/// }
///
/// \endcode\param callback Called on completion with the array of <code>Order</code>s or any errors encountered. Optional.
///
- (void)fetchWithCallback:(void (^ _Nullable)(NSArray<FlyBuyOrder *> * _Nullable, NSError * _Nullable))callback;
/// Fetch an unclaimed order using the redemptionCode.
/// After the <code>Order</code> is fetched, use <code>claim(withRedemptionCode:customerInfo:pickupType:callback:)</code> to associate the order with the current customer which may start location tracking.
/// Example:
/// \code
/// FlyBuy.Core.orders.fetch(withRedemptionCode: code) { (order, error) -> (Void) in
///   if let error = error {
///     // Handle error
///   } else {
///     // Handle success
///   }
/// }
///
/// \endcode\param redemptionCode the redemption code for the order
///
/// \param callback will get called on completion with the array of <code>Order</code>s or any errors encountered. Optional.
///
- (void)fetchWithRedemptionCode:(NSString * _Nonnull)redemptionCode callback:(void (^ _Nullable)(FlyBuyOrder * _Nullable, NSError * _Nullable))callback;
/// Claim an order for the current customer.
/// redemptionCode and customerInfo are required to claim the order.
/// Optionally, a pickupType may be provided. This is only necessary for apps that do not set the pickup type via backend integrations when the order is created. Supported pickup types currently include “curbside”, “pickup”, and “delivery”. Passing nil will leave the pickupType unchanged.
/// Example:
/// \code
/// // Create the customer info struct for person picking up (name is required)
/// let customerInfo = CustomerInfo(
///   name: "Marty McFly",
///   carType: "DeLorean",
///   carColor: "Silver",
///   licensePlate: "OUTATIME",
///   phone: "555-555-5555"
/// )
///
/// FlyBuy.Core.orders.claim(withRedemptionCode: code, customerInfo: customerInfo) { (order, error) -> (Void) in
///   if let error = error {
///     // Handle error
///   } else {
///     // Handle success
///   }
/// }
///
/// \endcode\param redemptionCode the redemption code for the order
///
/// \param customerInfo the customer details for the order
///
/// \param pickupType the pickup type string value for the order. Optional.
///
/// \param callback will get called on completion with the <code>Order</code> and any errors encountered. Optional.
///
- (void)claimWithRedemptionCode:(NSString * _Nonnull)redemptionCode customerInfo:(FlyBuyCustomerInfo * _Nonnull)customerInfo pickupType:(NSString * _Nullable)pickupType callback:(void (^ _Nullable)(FlyBuyOrder * _Nullable, NSError * _Nullable))callback;
/// Create an <code>Order</code> for the current customer for the site with the given siteID.
/// partnerIdentifier (e.g. order number) and customerInfo are required.
/// Most orders will have a pickup time of “ASAP”. If you have a different pickup window, you can pass a pickupWindow parameter. If you want the default of “ASAP”, omit the parameter.
/// \param siteID site identifier
///
/// \param partnerIdentifier partner identifier for the order
///
/// \param customerInfo customer information
///
/// \param pickupWindow pickup window for the order. Optional.
///
/// \param state initial order state
///
/// \param callback called once either an <code>Order</code> is created or an error is encountered. Optional.
///
- (void)createWithSiteID:(NSInteger)siteID partnerIdentifier:(NSString * _Nonnull)partnerIdentifier customerInfo:(FlyBuyCustomerInfo * _Nonnull)customerInfo pickupWindow:(FlyBuyPickupWindow * _Nullable)pickupWindow state:(NSString * _Nonnull)state callback:(void (^ _Nullable)(FlyBuyOrder * _Nullable, NSError * _Nullable))callback;
/// Create an <code>Order</code> for the current customer for the site with the given siteID.
/// \param siteID site identifier
///
/// \param partnerIdentifier partner identifier for the order
///
/// \param customerInfo customer information
///
/// \param pickupWindow pickup window for the order. Optional.
///
/// \param state initial order state
///
/// \param pickupType the pickup type string value for the order. Optional.
///
/// \param callback called once either an <code>Order</code> is created or an error is encountered. Optional.
///
- (void)createWithSiteID:(NSInteger)siteID partnerIdentifier:(NSString * _Nonnull)partnerIdentifier customerInfo:(FlyBuyCustomerInfo * _Nonnull)customerInfo pickupWindow:(FlyBuyPickupWindow * _Nullable)pickupWindow state:(NSString * _Nonnull)state pickupType:(NSString * _Nullable)pickupType callback:(void (^ _Nullable)(FlyBuyOrder * _Nullable, NSError * _Nullable))callback;
/// Create an <code>Order</code> for the current customer for the site with the given siteID.
/// Example:
/// \code
/// let customerInfo = CustomerInfo(
///   name: "Marty McFly",
///   carType: "DeLorean",
///   carColor: "Silver",
///   licensePlate: "OUTATIME",
///   phone: "555-555-5555"
/// )
///
/// FlyBuy.Core.orders.create(siteID: 101, partnerIdentifier: "1234123", customerInfo: customerInfo) { (order, error) -> (Void) in
///   if let error = error {
///     // Handle error
///   } else {
///     // Handle success
///   }
/// }
///
/// \endcode\param siteID site identifier
///
/// \param partnerIdentifier partner identifier for the order
///
/// \param customerInfo customer information
///
/// \param pickupWindow pickup window for the order. Optional.
///
/// \param callback called once either an <code>Order</code> is created or an error is encountered. Optional.
///
- (void)createWithSiteID:(NSInteger)siteID partnerIdentifier:(NSString * _Nonnull)partnerIdentifier customerInfo:(FlyBuyCustomerInfo * _Nonnull)customerInfo pickupWindow:(FlyBuyPickupWindow * _Nullable)pickupWindow callback:(void (^ _Nullable)(FlyBuyOrder * _Nullable, NSError * _Nullable))callback;
/// Create an <code>Order</code> for the current customer for the site with the given siteID.
/// Example:
/// \code
/// let customerInfo = CustomerInfo(
///   name: "Marty McFly",
///   carType: "DeLorean",
///   carColor: "Silver",
///   licensePlate: "OUTATIME",
///   phone: "555-555-5555"
/// )
///
/// FlyBuy.Core.orders.create(siteID: 101, partnerIdentifier: "1234123", customerInfo: customerInfo) { (order, error) -> (Void) in
///   if let error = error {
///     // Handle error
///   } else {
///     // Handle success
///   }
/// }
///
/// \endcode\param siteID site identifier
///
/// \param partnerIdentifier partner identifier for the order
///
/// \param customerInfo customer information
///
/// \param pickupWindow pickup window for the order. Optional.
///
/// \param pickupType the pickup type string value for the order. Optional.
///
/// \param callback called once either an <code>Order</code> is created or an error is encountered. Optional.
///
- (void)createWithSiteID:(NSInteger)siteID partnerIdentifier:(NSString * _Nonnull)partnerIdentifier customerInfo:(FlyBuyCustomerInfo * _Nonnull)customerInfo pickupWindow:(FlyBuyPickupWindow * _Nullable)pickupWindow pickupType:(NSString * _Nullable)pickupType callback:(void (^ _Nullable)(FlyBuyOrder * _Nullable, NSError * _Nullable))callback;
/// Create an <code>Order</code> for the current customer for the site with the given siteID.
/// \param siteID site identifier
///
/// \param partnerIdentifier partner identifier for the order
///
/// \param customerInfo customer information
///
/// \param state initial order state. Optional.
///
/// \param pickupType the pickup type string value for the order. Optional.
///
/// \param callback called once either an <code>Order</code> is created or an error is encountered. Optional.
///
- (void)createWithSiteID:(NSInteger)siteID partnerIdentifier:(NSString * _Nonnull)partnerIdentifier customerInfo:(FlyBuyCustomerInfo * _Nonnull)customerInfo state:(NSString * _Nullable)state pickupType:(NSString * _Nullable)pickupType callback:(void (^ _Nullable)(FlyBuyOrder * _Nullable, NSError * _Nullable))callback;
/// Update the customerState for an order with the given orderId.
/// Example:
/// \code
/// FlyBuy.Core.orders.updateCustomerState(orderID: order.id, customerState: "waiting") { (order, error) -> (Void) in
///   if let error = error {
///     // Handle error
///   } else {
///     // Handle success
///   }
/// }
///
/// \endcode\param orderID specifies which order ID this event relates to
///
/// \param customerState contains the customer state which should be set on the order
///
/// \param callback Gets called at completion with the <code>Order</code> or any error encountered. Optional.
///
- (void)updateCustomerStateWithOrderID:(NSInteger)orderID customerState:(NSString * _Nonnull)customerState callback:(void (^ _Nullable)(FlyBuyOrder * _Nullable, NSError * _Nullable))callback;
/// Update the customerState and send a spotIdentifier for an <code>Order</code> with the given orderId.
/// In order to send a spot identifier, send a “waiting”customerState with the spotIdentifier. Note that spot identifiers are currently only allowed when the customer state is set to “waiting”. If the customer state is already “waiting”, this method can be called again with the “waiting” customer state to update the spot identifier.
/// Note that there is a character limit for the spot identifier (currently 35 characters), the method will return an error if the character limit is exceeded.
/// An <code>Order</code> also has fields for spotIdentifierEntryEnabled and spotIdentifierInputType that can be used by the app to decide if spot entry should be allowed. Note that the spotIdentifier can be set for the order regardless of these fields values.
/// Example:
/// \code
/// FlyBuy.Core.orders.updateCustomerState(orderID: order.id, customerState: "waiting", spotIdentifier: "1") { (order, error) -> (Void) in
///   if let error = error {
///     // Handle error
///   } else {
///     // Handle success
///   }
/// }
///
/// \endcode\param orderID specifies which order ID this event relates to
///
/// \param customerState contains the customer state which should be set on the order
///
/// \param spotIdentifier contains the parking  spot identifier
///
/// \param callback Gets called at completion with the <code>Order</code> or any error encountered. Optional.
///
- (void)updateCustomerStateWithOrderID:(NSInteger)orderID customerState:(NSString * _Nonnull)customerState spotIdentifier:(NSString * _Nullable)spotIdentifier callback:(void (^ _Nullable)(FlyBuyOrder * _Nullable, NSError * _Nullable))callback;
/// Update the state for an <code>Order</code> with the given orderId.
/// Example:
/// \code
/// FlyBuy.Core.orders.updateState(orderID: order.id, state: "cancelled") { order, error ->
///   if let error = error {
///     // Handle error
///   } else {
///     // Handle success
///   }
/// }
///
/// \endcode\param orderID specifies which order ID this event relates to
///
/// \param state contains the order state which should be set on the order
///
/// \param callback Gets called at completion with the <code>Order</code> or any error encountered. Optional.
///
- (void)updateOrderStateWithOrderID:(NSInteger)orderID state:(NSString * _Nonnull)state callback:(void (^ _Nullable)(FlyBuyOrder * _Nullable, NSError * _Nullable))callback;
/// Send a customer rating for an <code>Order</code> with the give orderId.
/// If you collect customer ratings in your app, you can pass them to Flybuy. The rating should be an integer and comments (optional) should be a string:
/// Example:
/// \code
/// FlyBuy.Core.orders.rateOrder(orderID: 123, rating: 5, comments: 'Great service') { order, error ->
///   if let error = error {
///     // Handle error
///   } else {
///     // Handle success
///   }
/// }
///
/// \endcode\param orderID specifies which order ID this event relates to
///
/// \param rating the rating number
///
/// \param comments the comment string. Optional.
///
/// \param callback Gets called at completion with the <code>Order</code> or any error encountered. Optional.
///
- (void)rateOrderWithOrderID:(NSInteger)orderID rating:(NSInteger)rating comments:(NSString * _Nullable)comments callback:(void (^ _Nullable)(FlyBuyOrder * _Nullable, NSError * _Nullable))callback;
@end



enum OrdersManagerErrorType : NSInteger;

/// Error that may be returned from OrdersManager methods.
SWIFT_CLASS_NAMED("OrdersManagerError")
@interface FlyBuyOrdersManagerError : NSObject
/// Returns the string describing the error type.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription SWIFT_DEPRECATED_MSG("Please use 'description' instead.");
@property (nonatomic, readonly) enum OrdersManagerErrorType type;
/// Returns the string describing the error type.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The type that may be associated with a OrdersManagerError.
typedef SWIFT_ENUM(NSInteger, OrdersManagerErrorType, open) {
  OrdersManagerErrorTypeLoadingCustomer = 0,
  OrdersManagerErrorTypeLoadingApiUrl = 1,
  OrdersManagerErrorTypeAlreadyFetching = 2,
  OrdersManagerErrorTypeInvalidCustomerState = 3,
  OrdersManagerErrorTypeInvalidOrderState = 4,
  OrdersManagerErrorTypeCoreIsNotConfigured = 5,
};


/// Contains pagination info when fetching <code>Site</code> info via the <code>SitesManager</code>
SWIFT_CLASS_NAMED("Pagination")
@interface FlyBuyPagination : NSObject
@property (nonatomic, readonly) NSInteger currentPage;
@property (nonatomic, readonly) NSInteger totalPages;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Data model for a pickup window for an order.
SWIFT_CLASS_NAMED("PickupWindow")
@interface FlyBuyPickupWindow : NSObject
@property (nonatomic, readonly, copy) NSDate * _Nonnull start;
@property (nonatomic, readonly, copy) NSDate * _Nonnull end;
- (nonnull instancetype)initWithStart:(NSDate * _Nonnull)start end:(NSDate * _Nonnull)end OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSDate * _Nonnull)date;
/// Formats the pickup window for the provided locale. If not provided, the device’s current locale is used.
- (NSString * _Nonnull)formattedStringWithLocale:(NSLocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Data model for sites.
SWIFT_CLASS_NAMED("Site")
@interface FlyBuySite : NSObject
@property (nonatomic, readonly) NSInteger id;
@property (nonatomic, readonly, copy) NSString * _Nullable partnerIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable phone;
@property (nonatomic, readonly, copy) NSString * _Nullable streetAddress;
@property (nonatomic, readonly, copy) NSString * _Nullable fullAddress;
@property (nonatomic, readonly, copy) NSString * _Nullable locality;
@property (nonatomic, readonly, copy) NSString * _Nullable region;
@property (nonatomic, readonly, copy) NSString * _Nullable country;
@property (nonatomic, readonly, copy) NSString * _Nullable postalCode;
@property (nonatomic, readonly, copy) NSString * _Nullable longitude;
@property (nonatomic, readonly, copy) NSString * _Nullable latitude;
@property (nonatomic, readonly, copy) NSString * _Nullable instructions;
@property (nonatomic, readonly, copy) NSString * _Nullable descriptionText;
@property (nonatomic, readonly, copy) NSString * _Nullable coverPhotoURL;
@property (nonatomic, readonly, copy) NSString * _Nullable projectAccentColor;
@property (nonatomic, readonly, copy) NSString * _Nullable projectAccentTextColor;
@property (nonatomic, readonly, copy) NSString * _Nullable projectLogoURL;
@property (nonatomic, readonly, strong) FlyBuyGeofence * _Nullable geofence;
@property (nonatomic, readonly, strong) NSNumber * _Nullable wrongSiteArrivalRadius;
@property (nonatomic, readonly, copy) NSString * _Nullable operationalStatus;
/// Gets the location of the site.
- (CLLocation * _Nullable)location SWIFT_WARN_UNUSED_RESULT;
/// Gets the distance between the given location and the site location.
- (NSNumber * _Nullable)distanceFrom:(CLLocation * _Nonnull)loc SWIFT_WARN_UNUSED_RESULT;
@end

@class CLCircularRegion;

/// Manager for site operations
/// Example:
/// \code
/// // fetch sites from FlyBuy
/// FlyBuy.sites.fetch()
///
/// \endcode
SWIFT_CLASS_NAMED("SitesManager")
@interface FlyBuySitesManager : NSObject
/// Gets all sites.
@property (nonatomic, readonly, copy) NSArray<FlyBuySite *> * _Nullable all;
/// fetches the list of sites from the FlyBuy web API via query string
/// \param query the query string. Optional.
///
/// \param page the desired page number. Optional.
///
/// \param callback will get called on completion with the array of <code>Site</code>s or any errors encountered. Optional.
///
- (void)fetchWithQuery:(NSString * _Nullable)query page:(NSInteger)page callback:(void (^ _Nullable)(NSArray<FlyBuySite *> * _Nullable, FlyBuyPagination * _Nullable, NSError * _Nullable))callback;
/// fetches the list of sites from the FlyBuy web API
/// \param query the query string. Optional.
///
/// \param page the desired page number. Optional.
///
/// \param operationalStatus the operational status filter string.
///
/// \param callback will get called on completion with the array of <code>Site</code>s or any errors encountered. Optional.
///
- (void)fetchWithQuery:(NSString * _Nullable)query page:(NSInteger)page operationalStatus:(NSString * _Nonnull)operationalStatus callback:(void (^ _Nullable)(NSArray<FlyBuySite *> * _Nullable, FlyBuyPagination * _Nullable, NSError * _Nullable))callback;
/// fetches the list of sites from the FlyBuy web API via search region
/// \param region a CLCircularRegion for the search region.
///
/// \param page the desired page number. Optional.
///
/// \param callback will get called on completion with the array of <code>Site</code>s or any errors encountered. Optional.
///
- (void)fetchWithRegion:(CLCircularRegion * _Nonnull)region page:(NSInteger)page callback:(void (^ _Nullable)(NSArray<FlyBuySite *> * _Nullable, NSError * _Nullable))callback;
/// fetches the list of sites from the FlyBuy web API via search region
/// \param region a CLCircularRegion for the search region.
///
/// \param page the desired page number. Optional.
///
/// \param operationalStatus the operational status filter string.
///
/// \param callback will get called on completion with the array of <code>Site</code>s or any errors encountered. Optional.
///
- (void)fetchWithRegion:(CLCircularRegion * _Nonnull)region page:(NSInteger)page operationalStatus:(NSString * _Nonnull)operationalStatus callback:(void (^ _Nullable)(NSArray<FlyBuySite *> * _Nullable, NSError * _Nullable))callback;
/// fetches the list of sites from the FlyBuy web API via search region
/// \param region a CLCircularRegion for the search region.
///
/// \param page the desired page number.
///
/// \param per the amount of sites returned per page.
///
/// \param callback will get called on completion with the array of <code>Site</code>s or any errors encountered. Optional.
///
- (void)fetchWithRegion:(CLCircularRegion * _Nonnull)region page:(NSInteger)page per:(NSInteger)per callback:(void (^ _Nullable)(NSArray<FlyBuySite *> * _Nullable, NSError * _Nullable))callback;
/// fetches the list of sites from the FlyBuy web API via search region
/// \param region a CLCircularRegion for the search region.
///
/// \param page the desired page number.
///
/// \param per the amount of sites returned per page.
///
/// \param operationalStatus the operational status filter string.
///
/// \param callback will get called on completion with the array of <code>Site</code>s or any errors encountered. Optional.
///
- (void)fetchWithRegion:(CLCircularRegion * _Nonnull)region page:(NSInteger)page per:(NSInteger)per operationalStatus:(NSString * _Nonnull)operationalStatus callback:(void (^ _Nullable)(NSArray<FlyBuySite *> * _Nullable, NSError * _Nullable))callback;
/// fetches the complete list of sites from the FlyBuy web API that matches the query string
/// \param query the query string. Optional.
///
/// \param callback will get called on completion with the array of <code>Site</code>s and any errors encountered. Optional.
///
- (void)fetchAllWithQuery:(NSString * _Nullable)query callback:(void (^ _Nullable)(NSArray<FlyBuySite *> * _Nullable, NSError * _Nullable))callback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Error that may be returned from SitesManager methods.
SWIFT_CLASS_NAMED("SitesManagerError")
@interface FlyBuySitesManagerError : NSObject
/// Returns the string describing the error type.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription SWIFT_DEPRECATED_MSG("Please use 'description' instead.");
/// Returns the string describing the error type.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The type that may be associated with a SitesManagerError.
typedef SWIFT_ENUM(NSInteger, SitesManagerErrorType, open) {
  SitesManagerErrorTypeCoreIsNotConfigured = 0,
};




SWIFT_CLASS("_TtC6FlyBuy22WrongSiteArrivalConfig")
@interface WrongSiteArrivalConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

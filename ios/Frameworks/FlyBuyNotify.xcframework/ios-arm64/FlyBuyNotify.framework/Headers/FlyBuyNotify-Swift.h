// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef FLYBUYNOTIFY_SWIFT_H
#define FLYBUYNOTIFY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FlyBuyNotify",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@class CLCircularRegion;
@class NotificationInfo;
@class FlyBuySite;

/// Manager for Notify operations
/// See <a href="https://www.radiusnetworks.com/developers/flybuy/#/">Flybuy Developer Docs</a> for additional details including all setup steps.
SWIFT_CLASS_NAMED("Manager")
@interface FlyBuyNotifyManager : NSObject
/// The shared <code>FlyBuyNotifyManager</code> instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlyBuyNotifyManager * _Nonnull shared;)
+ (FlyBuyNotifyManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Configure and initialize the Notify module.
/// In addition to initializing the Flybuy core module you need to initialize the Notify module. Call this method to setup Flybuy Notify and enable campaigns in your app. This will setup the notifications and automatically sync with the settings created in the Flybuy portal.
/// See <a href="https://www.radiusnetworks.com/developers/flybuy/#/">Flybuy Developer Docs</a> for additional details including all setup steps.
/// Example:
/// \code
/// func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {   
///   // Configure Core
///   FlyBuy.Core.configure(["token": "TOKEN_HERE"])
///   // Enables Notify and uses Background Tasks
///   // The optional callback is performed upon completion of
///   // a campaign sync triggered by a background task.
///   FlyBuyNotify.Manager.shared.configure(bgTaskIdentifier: "your.unique.background.app.refresh.task.identifier")
///   return true
/// }
///
/// \endcodenote:
/// If opting to not support the Background Tasks framework for updating campaign content, simply call configure() without any arguments.
/// \param bgTaskIdentifier Unique string identifier for the background task. Identifier must be added to the app’s info.plist under the “BGTaskSchedulerPermittedIdentifiers” key.
///
/// \param bgSyncCallback Called upon completion of a campaign sync triggered by a background task. Optional
///
- (void)configureWithBgTaskIdentifier:(NSString * _Nullable)bgTaskIdentifier bgSyncCallback:(void (^ _Nullable)(NSError * _Nullable))bgSyncCallback;
/// Notify V1 method for creating notifications for sites within a region using the provided notificationInfo.
- (void)createForSitesInRegion:(CLCircularRegion * _Nonnull)region notification:(NotificationInfo * _Nonnull)notification callback:(void (^ _Nonnull)(NSArray<FlyBuySite *> * _Nullable, NSError * _Nullable))callback SWIFT_DEPRECATED_MSG("This method for using Notify has been deprecated.");
/// Notify V1 method for creating notifications for sites using the provided notificationInfo.
- (void)createForSites:(NSArray<FlyBuySite *> * _Nonnull)sites notification:(NotificationInfo * _Nonnull)notification callback:(void (^ _Nonnull)(NSError * _Nullable))callback SWIFT_DEPRECATED_MSG("This method for using Notify has been deprecated.");
/// Notify V1 method for clearing notifications.
/// \param callback will get called on completion of any errors encountered.
///
- (void)clearWithCallback:(void (^ _Nonnull)(NSError * _Nullable))callback SWIFT_DEPRECATED_MSG("This method for using Notify has been deprecated.");
/// Notify V1 method for checking if a remote notification is from a Notify notification.
- (BOOL)isFlyBuyNotifyUserInfo:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This method for using Notify has been deprecated.");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@class UNNotificationResponse;

@interface FlyBuyNotifyManager (SWIFT_EXTENSION(FlyBuyNotify))
/// Sync Notify campaign data.
/// The sync method is provided as a development tool, in production applications it should not be called. The SDK will automatically sync data with the Flybuy portal. However, the schedule used by the SDK may not be conducive to testing and development iterations.
/// Important: The force parameter will destroy all local notify data and re-fetch any data.
/// \param force When set to true, SDK will destroy all local notify data and re-fetch any data upon sync
///
/// \param callback Called when the campaign sync is successful or any error encountered.
///
- (void)syncWithForce:(BOOL)force callback:(void (^ _Nullable)(NSError * _Nullable))callback;
/// Supports Notify campaign updates using the deprecated Background Fetch framework.
/// This is intended for supporting an app target of iOS 12 or prior. If app target is iOS 13 or above, it is highly recommended to omit this and use the new iOS Background Task for updating campaigns by passing a background task identifier to the configure() call.
/// important:
/// Adding a background task identifier to the app’s info.plist will disable the deprecated Background Fetch framework. In case the app is already using Background Fetch for any other background fetch tasks, this key should NOT be added to the app’s info.plist as adding it will cause iOS to no longer trigger the application(_:performFetchWithCompletionHandler:) callback.
/// Example:
/// \code
/// // In the AppDelegate
/// func application(_ application: UIApplication, performFetchWithCompletionHandler  completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
///   FlyBuyNotify.Manager.shared.performFetchWithCompletionHandler(completionHandler)
/// }
///
/// \endcode\param completionHandler The completion handler that is passed to the appdelegate by iOS.
///
- (void)performFetchWithCompletionHandler:(void (^ _Nullable)(UIBackgroundFetchResult))completionHandler;
/// Handles the response to the campaign, looking up any associated data. This will open a deep link if present.
/// handleNotification() takes a notification response, looks up any associated campaign, opens the associated deep link if present, and returns the metadata associated with the campaign. If the metadata object is not nil, then the notification came from a campaign, and the metadata can be used to decide what to do. Otherwise, handle the notification normally.
/// note:
/// As a prerequisite, the delegate for UNUserNotificationCenter must be assigned before the app finishes launching.
/// note:
/// This will return nil if the notification is not handled by Flybuy.
/// note:
/// To receive notifications while the app is in the foreground, the app must also implement UNUserNotificationCenter‘s delegate method userNotificationCenter(_:willPresent:withCompletionHandler:) as noted in the example.
/// Example:
/// \code
/// extension AppDelegate: UNUserNotificationCenterDelegate{
///   func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {
///     if let metadata = FlyBuyNotify.Manager.shared.handleNotification(response), metadata.isEmpty == false {
///       // Do something with campaign metadata
///     } else {
///       // Handler other notifications here
///     }
///     completionHandler()
/// }
///
///   // Enables app to receive notifications while in the foreground
///   func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
///     completionHandler([.badge, .sound, .alert])
///   }
/// }
///
///
/// \endcode
/// returns:
/// The associated meta data
- (NSDictionary<NSString *, NSString *> * _Nullable)handleNotification:(UNNotificationResponse * _Nonnull)response SWIFT_WARN_UNUSED_RESULT;
@end


/// Data model for notification info provided to Notify V1.
SWIFT_CLASS("_TtC12FlyBuyNotify16NotificationInfo")
@interface NotificationInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nonnull content;
@property (nonatomic, readonly, copy) NSDictionary * _Nullable data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum NotifyErrorType : NSInteger;

/// Error that may be returned from FlyBuyNotifyManager methods.
SWIFT_CLASS_NAMED("NotifyError")
@interface FlyBuyNotifyError : NSObject
/// Specifies the error type and contains a description of the error.
@property (nonatomic, readonly) enum NotifyErrorType type;
- (nonnull instancetype)init:(enum NotifyErrorType)typeIn OBJC_DESIGNATED_INITIALIZER;
/// Returns the string describing the error type.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The type that may be associated with a NotifyError.
typedef SWIFT_ENUM(NSInteger, NotifyErrorType, open) {
  NotifyErrorTypeNoLocationPermission = 0,
  NotifyErrorTypeReachedTheMaxNumberOfSites = 1,
  NotifyErrorTypeNotifyModuleNotConfigured = 2,
  NotifyErrorTypeCoreIsNotConfigured = 3,
  NotifyErrorTypeNotifyModuleNotEnabled = 4,
  NotifyErrorTypeBeaconRangingNotAvailable = 5,
  NotifyErrorTypeNoBeaconInRange = 6,
  NotifyErrorTypeBeaconRangingDisabledInBackground = 7,
};


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef FLYBUYPRESENCE_SWIFT_H
#define FLYBUYPRESENCE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FlyBuyPresence",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// An event type that may be received by the PresenceLocator
typedef SWIFT_ENUM(uint8_t, LocatorEvent, open) {
  LocatorEventConfirmed = 1,
  LocatorEventError = 2,
  LocatorEventPresent = 3,
  LocatorEventReceived = 4,
};

@class NSUUID;
@class NSString;
@class PresenceLocator;
@class NSData;

/// Manager for presence operations
/// Allows creating a presence locator in order to interact with presence detection hardware
/// installed at a site.
/// See <a href="https://www.radiusnetworks.com/developers/flybuy/#/">Flybuy Developer Docs</a> for additional details including all setup steps.
SWIFT_CLASS_NAMED("Manager")
@interface FlyBuyPresenceManager : NSObject
/// The shared <code>FlyBuyPresenceManager</code> instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlyBuyPresenceManager * _Nonnull shared;)
+ (FlyBuyPresenceManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Declares the max payload size when creating a locator.
@property (nonatomic, readonly) NSInteger maxPayloadSize;
/// The configured kit Presence UUID. Read-only.
@property (nonatomic, readonly, copy) NSUUID * _Nullable presenceUUID;
/// Configure and initialize the Presence module with the UUID associated with the app’s project.
/// In addition to initializing the Flybuy core module you need to initialize the Presence module. Call this method with the presenceUUID to setup Flybuy Presence in your app.
/// See <a href="https://www.radiusnetworks.com/developers/flybuy/#/">Flybuy Developer Docs</a> for additional details including all setup steps.
/// Example:
/// \code
/// func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
/// // Configure Core
/// FlyBuy.Core.configure(["token": "TOKEN_HERE"])
///
/// // Configure Presence
/// let presenceUUID = UUID(uuidstring: "54003B4B-E2E3-46A3-A2E9-299F9F576C4B")!
/// FlyBuyPresence.Manager.shared.configure(presenceUUID)
///
/// return true
/// }
///
/// \endcode\param presenceUUID The Presence UUID associated with the app’s project.
///
- (void)configureWithPresenceUUID:(NSUUID * _Nonnull)presenceUUID;
/// Calls the FlyBuy web API in order to create a presence locator
- (void)createLocatorWithPayload:(NSString * _Nullable)payload callback:(SWIFT_NOESCAPE void (^ _Nonnull)(PresenceLocator * _Nullable, NSError * _Nullable))callback;
/// Creates a presence locator with the given identifier and payload
/// The application should provide a unique Presence Level® identifier (presenceIdentifier) to create a PresenceLocator. A PresenceLocator is a Bluetooth advertisement that can transmit information to the Flybuy Gateway from a mobile device in a specific spot.
/// note:
/// To receive updates from the PresenceLocator (e.g. starting, stopping, and state updates), set the delegate for the locator after it is created (see example).
/// Example:
/// \code
/// // create a locator
/// let presenceId = Data([UInt8](arrayLiteral:1,2,3,4,5,6,7,8))
/// let payload = "{'key':'value'}"
/// FlyBuyPresence.Manager.shared.createLocatorWithIdentifier(presenceId, payload: payload) { (locator, error) -> (Void) in
///   locator?.delegate = self
///   FlyBuyPresence.Manager.shared.start(locator!)
/// }
///
/// \endcode\param presenceIdentifier A unique Presence Level® identifier
///
/// \param payload The payload string to be added to the locator. Optional
///
/// \param callback Called with the <code>PresenceLocator</code> if successfully created or any error encountered.
///
- (void)createLocatorWithIdentifier:(NSData * _Nonnull)presenceIdentifier payload:(NSString * _Nullable)payload callback:(SWIFT_NOESCAPE void (^ _Nonnull)(PresenceLocator * _Nullable, NSError * _Nullable))callback;
/// Starts the bluetooth advertising and service associated with a presence locator
- (void)start:(PresenceLocator * _Nonnull)locator;
/// Stops the bluetooth advertising and service associated with a presence locator
- (NSError * _Nullable)stop SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


enum PresenceErrorType : NSInteger;

/// Error that may be returned from FlyBuyPresenceManager methods.
SWIFT_CLASS_NAMED("PresenceError")
@interface FlyBuyPresenceError : NSObject
@property (nonatomic, readonly) enum PresenceErrorType type;
- (nonnull instancetype)init:(enum PresenceErrorType)typeIn OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The type that may be associated with a PresenceError.
typedef SWIFT_ENUM(NSInteger, PresenceErrorType, open) {
  PresenceErrorTypeInvalidPresenceIdentifierLength = 0,
  PresenceErrorTypeInvalidPayloadLength = 1,
  PresenceErrorTypeUnableToCreateLocator = 2,
  PresenceErrorTypeFailedToStartAdvertising = 3,
  PresenceErrorTypeAdvertiserAlreadyStarted = 4,
  PresenceErrorTypeLocatorNotStarted = 5,
  PresenceErrorTypeBluetoothPoweredOff = 6,
  PresenceErrorTypeBluetoothUnauthorized = 7,
  PresenceErrorTypeBluetoothUnsupported = 8,
  PresenceErrorTypePresenceManagerNotConfigured = 9,
};


/// Data model for the presence locator
SWIFT_CLASS("_TtC14FlyBuyPresence15PresenceLocator")
@interface PresenceLocator : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Presence Locator delegate methods
/// Implement these methods to receive status updates from the PresenceLocator
SWIFT_PROTOCOL("_TtP14FlyBuyPresence23PresenceLocatorDelegate_")
@protocol PresenceLocatorDelegate
@optional
/// Called when the PresenceLocator is successfully started
- (void)locatorDidStart:(PresenceLocator * _Nonnull)locator;
/// Called when the PresenceLocator is successfully stopped
- (void)locatorDidStop:(PresenceLocator * _Nonnull)locator;
/// Called when the PresenceLocator encounters an error
- (void)locatorDidFail:(PresenceLocator * _Nonnull)locator error:(NSError * _Nonnull)error;
/// Called when the PresenceLocator receives an event from the Flybuy Gateway
- (void)locator:(PresenceLocator * _Nonnull)locator didReceiveEvent:(uint8_t)type;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef FLYBUYPRESENCE_SWIFT_H
#define FLYBUYPRESENCE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FlyBuyPresence",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// An event type that may be received by the PresenceLocator
typedef SWIFT_ENUM(uint8_t, LocatorEvent, open) {
  LocatorEventConfirmed = 1,
  LocatorEventError = 2,
  LocatorEventPresent = 3,
  LocatorEventReceived = 4,
};

@class NSUUID;
@class NSString;
@class PresenceLocator;
@class NSData;

/// Manager for presence operations
/// Allows creating a presence locator in order to interact with presence detection hardware
/// installed at a site.
/// See <a href="https://www.radiusnetworks.com/developers/flybuy/#/">Flybuy Developer Docs</a> for additional details including all setup steps.
SWIFT_CLASS_NAMED("Manager")
@interface FlyBuyPresenceManager : NSObject
/// The shared <code>FlyBuyPresenceManager</code> instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FlyBuyPresenceManager * _Nonnull shared;)
+ (FlyBuyPresenceManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Declares the max payload size when creating a locator.
@property (nonatomic, readonly) NSInteger maxPayloadSize;
/// The configured kit Presence UUID. Read-only.
@property (nonatomic, readonly, copy) NSUUID * _Nullable presenceUUID;
/// Configure and initialize the Presence module with the UUID associated with the app’s project.
/// In addition to initializing the Flybuy core module you need to initialize the Presence module. Call this method with the presenceUUID to setup Flybuy Presence in your app.
/// See <a href="https://www.radiusnetworks.com/developers/flybuy/#/">Flybuy Developer Docs</a> for additional details including all setup steps.
/// Example:
/// \code
/// func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
/// // Configure Core
/// FlyBuy.Core.configure(["token": "TOKEN_HERE"])
///
/// // Configure Presence
/// let presenceUUID = UUID(uuidstring: "54003B4B-E2E3-46A3-A2E9-299F9F576C4B")!
/// FlyBuyPresence.Manager.shared.configure(presenceUUID)
///
/// return true
/// }
///
/// \endcode\param presenceUUID The Presence UUID associated with the app’s project.
///
- (void)configureWithPresenceUUID:(NSUUID * _Nonnull)presenceUUID;
/// Calls the FlyBuy web API in order to create a presence locator
- (void)createLocatorWithPayload:(NSString * _Nullable)payload callback:(SWIFT_NOESCAPE void (^ _Nonnull)(PresenceLocator * _Nullable, NSError * _Nullable))callback;
/// Creates a presence locator with the given identifier and payload
/// The application should provide a unique Presence Level® identifier (presenceIdentifier) to create a PresenceLocator. A PresenceLocator is a Bluetooth advertisement that can transmit information to the Flybuy Gateway from a mobile device in a specific spot.
/// note:
/// To receive updates from the PresenceLocator (e.g. starting, stopping, and state updates), set the delegate for the locator after it is created (see example).
/// Example:
/// \code
/// // create a locator
/// let presenceId = Data([UInt8](arrayLiteral:1,2,3,4,5,6,7,8))
/// let payload = "{'key':'value'}"
/// FlyBuyPresence.Manager.shared.createLocatorWithIdentifier(presenceId, payload: payload) { (locator, error) -> (Void) in
///   locator?.delegate = self
///   FlyBuyPresence.Manager.shared.start(locator!)
/// }
///
/// \endcode\param presenceIdentifier A unique Presence Level® identifier
///
/// \param payload The payload string to be added to the locator. Optional
///
/// \param callback Called with the <code>PresenceLocator</code> if successfully created or any error encountered.
///
- (void)createLocatorWithIdentifier:(NSData * _Nonnull)presenceIdentifier payload:(NSString * _Nullable)payload callback:(SWIFT_NOESCAPE void (^ _Nonnull)(PresenceLocator * _Nullable, NSError * _Nullable))callback;
/// Starts the bluetooth advertising and service associated with a presence locator
- (void)start:(PresenceLocator * _Nonnull)locator;
/// Stops the bluetooth advertising and service associated with a presence locator
- (NSError * _Nullable)stop SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


enum PresenceErrorType : NSInteger;

/// Error that may be returned from FlyBuyPresenceManager methods.
SWIFT_CLASS_NAMED("PresenceError")
@interface FlyBuyPresenceError : NSObject
@property (nonatomic, readonly) enum PresenceErrorType type;
- (nonnull instancetype)init:(enum PresenceErrorType)typeIn OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The type that may be associated with a PresenceError.
typedef SWIFT_ENUM(NSInteger, PresenceErrorType, open) {
  PresenceErrorTypeInvalidPresenceIdentifierLength = 0,
  PresenceErrorTypeInvalidPayloadLength = 1,
  PresenceErrorTypeUnableToCreateLocator = 2,
  PresenceErrorTypeFailedToStartAdvertising = 3,
  PresenceErrorTypeAdvertiserAlreadyStarted = 4,
  PresenceErrorTypeLocatorNotStarted = 5,
  PresenceErrorTypeBluetoothPoweredOff = 6,
  PresenceErrorTypeBluetoothUnauthorized = 7,
  PresenceErrorTypeBluetoothUnsupported = 8,
  PresenceErrorTypePresenceManagerNotConfigured = 9,
};


/// Data model for the presence locator
SWIFT_CLASS("_TtC14FlyBuyPresence15PresenceLocator")
@interface PresenceLocator : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Presence Locator delegate methods
/// Implement these methods to receive status updates from the PresenceLocator
SWIFT_PROTOCOL("_TtP14FlyBuyPresence23PresenceLocatorDelegate_")
@protocol PresenceLocatorDelegate
@optional
/// Called when the PresenceLocator is successfully started
- (void)locatorDidStart:(PresenceLocator * _Nonnull)locator;
/// Called when the PresenceLocator is successfully stopped
- (void)locatorDidStop:(PresenceLocator * _Nonnull)locator;
/// Called when the PresenceLocator encounters an error
- (void)locatorDidFail:(PresenceLocator * _Nonnull)locator error:(NSError * _Nonnull)error;
/// Called when the PresenceLocator receives an event from the Flybuy Gateway
- (void)locator:(PresenceLocator * _Nonnull)locator didReceiveEvent:(uint8_t)type;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif

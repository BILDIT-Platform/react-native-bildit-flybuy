(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9277],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6805:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l},default:function(){return c}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i={sidebar_position:4},s={unversionedId:"Components/Notifications",id:"Components/Notifications",isDocsHomePage:!1,title:"Notifications",description:"Update Push Token",source:"@site/docs/Components/Notifications.md",sourceDirName:"Components",slug:"/Components/Notifications",permalink:"/react-native-bildit-flybuy/docs/Components/Notifications",editUrl:"https://github.com/bildit-Platform/react-native-bildit-flybuy/edit/main/website/docs/Components/Notifications.md",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Sites",permalink:"/react-native-bildit-flybuy/docs/Components/Sites"},next:{title:"CustomerInfo Object Type",permalink:"/react-native-bildit-flybuy/docs/Types/CustomerInfo"}},l=[{value:"Update Push Token",id:"update-push-token",children:[]},{value:"Handle Remote Notification",id:"handle-remote-notification",children:[]}],u={toc:l};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"update-push-token"},"Update Push Token"),(0,o.kt)("p",null,"Once your app receives a token for your push notification service, the token needs to be provided by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"FlyBuy.Core.updatePushToken()"),". This allows your app to receive updates to the order information via push notification:"),(0,o.kt)("h4",{id:"params"},"Params"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"token"),(0,o.kt)("td",{parentName:"tr",align:null},"String")))),(0,o.kt)("h4",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import * as FlyBuyCore from 'react-native-bildit-flybuy-core';\n\nFlyBuyCore.updatePushToken(\n  '740f4707bebcf74f9b7c25d48e3358945f6aa01da5ddb387462c7eaf61bb78ad'\n);\n")),(0,o.kt)("h2",{id:"handle-remote-notification"},"Handle Remote Notification"),(0,o.kt)("p",null,"This method is used to handle remote notification and update the order data in the SDK."),(0,o.kt)("h4",{id:"params-1"},"Params"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Example"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"data"),(0,o.kt)("td",{parentName:"tr",align:null},"Obj"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'{"message_source": "flybuy","order_id": "1","state": "created","customer_state": "arrived","eta_at": "2020-02-01T00:00:00.000Z"}'))))),(0,o.kt)("h4",{id:"example-1"},"Example"),(0,o.kt)("p",null,"This example provide a full use case of using FCM listener and calling flybuy methods."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useEffect, useState } from 'react';\nimport messaging, {\n  FirebaseMessagingTypes,\n} from '@react-native-firebase/messaging';\nimport * as FlyBuyCore from 'react-native-bildit-flybuy-core'\n\nconst App = () => {\n  const [orderState, setOrderState] = useState('');\n  const [customerState, setCustomerState] = useState('');\n\n  useEffect(() => {\n    // Get the device token\n    messaging()\n      .getToken()\n      .then((token) => {\n        FlyBuyCore.updatePushToken(token);\n      });\n\n    return messaging().onTokenRefresh((token) => {\n      FlyBuyCore.updatePushToken(token);\n    });\n  }, []);\n\n  useEffect(() => {\n    const FCMUnsubscribe = messaging().onMessage(\n      async (remoteMessage: FirebaseMessagingTypes.RemoteMessage) => {\n        console.log(\n          'A new FCM message arrived!',\n          JSON.stringify(remoteMessage)\n        );\n        if (remoteMessage.data.message_source === 'flybuy') {\n          const { customer_state, order_state } = remoteMessage.data;\n          // ...Update order state locally\n          setOrderState(order_state);\n          customerState(customer_state);\n          FlyBuyCore.handleRemoteNotification(remoteMessage.data);\n        }\n      }\n    );\n\n    return () => {\n      FCMUnsubscribe();\n    };\n  }, []);\n};\n\nexport default App;\n")))}c.isMDXComponent=!0}}]);
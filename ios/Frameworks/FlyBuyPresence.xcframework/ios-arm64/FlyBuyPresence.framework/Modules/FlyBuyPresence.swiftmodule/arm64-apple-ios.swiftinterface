// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FlyBuyPresence
import CoreBluetooth
import CoreLocation
import FlyBuy
@_exported import FlyBuyPresence
import Foundation
import Swift
@_inheritsConvenienceInitializers @objc(FlyBuyPresenceManager) public class Manager : ObjectiveC.NSObject {
  @objc public static let shared: FlyBuyPresence.Manager
  @objc final public let maxPayloadSize: Swift.Int
  @objc public var presenceUUID: Foundation.UUID? {
    get
  }
  @objc public func configure(presenceUUID: Foundation.UUID)
  @objc deinit
  @objc public func createLocator(payload: Swift.String? = nil, callback: ((FlyBuyPresence.PresenceLocator?, Swift.Error?) -> (Swift.Void)))
  @objc public func createLocatorWithIdentifier(_ presenceIdentifier: Foundation.Data, payload: Swift.String? = nil, callback: ((FlyBuyPresence.PresenceLocator?, Swift.Error?) -> (Swift.Void)))
  @objc public func start(_ locator: FlyBuyPresence.PresenceLocator)
  @objc public func stop() -> (Swift.Error?)
  @objc override dynamic public init()
}
extension Manager : FlyBuy.FlyBuyModuleManager {
  public func configUpdated(_ config: FlyBuy.AppConfig)
}
@objc public enum PresenceErrorType : Swift.Int {
  case invalidPresenceIdentifierLength
  case invalidPayloadLength
  case unableToCreateLocator
  case failedToStartAdvertising
  case advertiserAlreadyStarted
  case locatorNotStarted
  case bluetoothPoweredOff
  case bluetoothUnauthorized
  case bluetoothUnsupported
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(FlyBuyPresenceError) @_objcRuntimeName(FlyBuyPresenceError) public class PresenceError : FlyBuy.FlyBuyError {
  @objc final public let type: FlyBuyPresence.PresenceErrorType
  @objc public init(_ typeIn: FlyBuyPresence.PresenceErrorType, context: Any? = nil)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  override public init(_ description: Swift.String?, context: Any? = super)
}
@objc public protocol PresenceLocatorDelegate {
  @objc optional func locatorDidStart(_ locator: FlyBuyPresence.PresenceLocator)
  @objc optional func locatorDidStop(_ locator: FlyBuyPresence.PresenceLocator)
  @objc optional func locatorDidFail(_ locator: FlyBuyPresence.PresenceLocator, error: Swift.Error)
  @objc optional func locator(_ locator: FlyBuyPresence.PresenceLocator, didUpdateState state: FlyBuyPresence.PresenceLocator.state)
}
@_hasMissingDesignatedInitializers @objc public class PresenceLocator : ObjectiveC.NSObject {
  @objc public enum state : Swift.UInt8 {
    case confirmed = 1
    case error = 2
    case present = 3
    public typealias RawValue = Swift.UInt8
    public init?(rawValue: Swift.UInt8)
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  final public let uuid: Foundation.UUID
  final public let identifier: Foundation.Data
  final public let payload: Swift.String?
  public var delegate: FlyBuyPresence.PresenceLocatorDelegate?
  @objc override dynamic public init()
  @objc deinit
}
extension FlyBuyPresence.PresenceErrorType : Swift.Equatable {}
extension FlyBuyPresence.PresenceErrorType : Swift.Hashable {}
extension FlyBuyPresence.PresenceErrorType : Swift.RawRepresentable {}
extension FlyBuyPresence.PresenceLocator.state : Swift.Equatable {}
extension FlyBuyPresence.PresenceLocator.state : Swift.Hashable {}
extension FlyBuyPresence.PresenceLocator.state : Swift.RawRepresentable {}

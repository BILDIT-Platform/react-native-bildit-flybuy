// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FlyBuy
import CoreBluetooth
import CoreLocation
@_exported import FlyBuy
import Foundation
import SQLite3
import Swift
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers @objc public class AppConfig : ObjectiveC.NSObject, Swift.Codable {
  final public let data: FlyBuy.AppConfigData?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension FlyBuy.AppConfig {
  public static let defaultLocationFilters: FlyBuy.PickupLocationFilters
}
@objc(FlyBuyPlace) public class Place : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String
  @objc final public let name: Swift.String
  @objc final public let placeFormatted: Swift.String
  @objc final public let distance: Swift.Double
  @objc final public let address: Swift.String?
  @objc public init(id: Swift.String, name: Swift.String, placeFormatted: Swift.String, address: Swift.String?, distance: Swift.Double = Double.zero)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum FlybuyLinkType : Swift.Int {
  case dineIn
  case redemption
  case other
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(FlybuyLink) open class LinkDetails : ObjectiveC.NSObject {
  @objc final public let url: Swift.String
  @objc final public let type: FlyBuy.FlybuyLinkType
  @objc final public let orderOptions: FlyBuy.OrderOptions.Builder?
  @objc final public let params: [Swift.String : Swift.String]
  @objc deinit
}
public struct PickupLocationFilters : Swift.Codable {
  public let ios: [FlyBuy.PickupLocationFilterData]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class PickupLocationFilterData : Swift.Codable, Swift.Equatable {
  public static func == (lhs: FlyBuy.PickupLocationFilterData, rhs: FlyBuy.PickupLocationFilterData) -> Swift.Bool
  public var proximityToSite: Swift.Int {
    get
  }
  final public let _desiredAccuracy: Swift.String
  final public let _activityType: Swift.String
  final public let distanceFilterCharging: Swift.Double
  final public let distanceFilterNotCharging: Swift.Double
  public init(proximityToSite: Swift.Int, desiredAccuracy: Swift.String, activityType: Swift.String, distanceFilterCharging: Swift.Double, distanceFilterNotCharging: Swift.Double)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension FlyBuy.PickupLocationFilterData {
  public static var defaultLocationFilter: FlyBuy.PickupLocationFilterData {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class NotifyConfig : ObjectiveC.NSObject, Swift.Codable {
  final public let defaultGeofenceRadiusMeters: Swift.Double
  final public let defaultSiteSearchRadiusMeters: Swift.Double
  final public let analyticsEventLimit: Swift.Int?
  public var sitesFetchLongitudePrecision: Swift.Int {
    get
  }
  public var sitesFetchLatitudePrecision: Swift.Int {
    get
  }
  public static let defaultGeoPrecision: Swift.Int
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc(FlyBuyCustomerConsent) open class CustomerConsent : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let termsOfService: Swift.Bool
  @objc final public let ageVerification: Swift.Bool
  @objc public init(termsOfService: Swift.Bool, ageVerification: Swift.Bool)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct BeaconIdentifiers : Swift.Hashable, Swift.Codable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: FlyBuy.BeaconIdentifiers, b: FlyBuy.BeaconIdentifiers) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Beacon {
}
extension FlyBuy.Beacon : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @objc(FlyBuyBeaconList) public class BeaconList : ObjectiveC.NSObject {
  public var beacons: [FlyBuy.BeaconIdentifiers : FlyBuy.Beacon]
  public func addScan(identifiers ids: FlyBuy.BeaconIdentifiers, rssi: Swift.Int, distance: Swift.Float)
  public func addScan(_ beacon: CoreLocation.CLBeacon)
  public func addScans(_ scannedBeacons: [CoreLocation.CLBeacon])
  public func removeStale()
  public func asArray() -> [FlyBuy.Beacon]
  @objc override dynamic public init()
  @objc deinit
}
extension FlyBuy.BeaconList : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension FlyBuy._AnyEncodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension FlyBuy._AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
@objc(FlyBuySite) open class Site : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let id: Swift.Int
  @objc final public let partnerIdentifier: Swift.String?
  @objc final public let name: Swift.String?
  @objc final public let phone: Swift.String?
  @objc final public let streetAddress: Swift.String?
  @objc final public let fullAddress: Swift.String?
  @objc final public let locality: Swift.String?
  @objc final public let region: Swift.String?
  @objc final public let country: Swift.String?
  @objc final public let postalCode: Swift.String?
  @objc final public let longitude: Swift.String?
  @objc final public let latitude: Swift.String?
  @objc final public let instructions: Swift.String?
  @objc final public let descriptionText: Swift.String?
  @objc final public let coverPhotoURL: Swift.String?
  @objc final public let projectAccentColor: Swift.String?
  @objc final public let projectAccentTextColor: Swift.String?
  @objc final public let projectLogoURL: Swift.String?
  @objc final public let geofence: FlyBuy.Geofence?
  @objc public var wrongSiteArrivalRadius: Foundation.NSNumber {
    @objc get
  }
  @objc final public let operationalStatus: Swift.String?
  @objc public func location() -> CoreLocation.CLLocation?
  @objc public func distance(from loc: CoreLocation.CLLocation) -> Foundation.NSNumber?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
extension FlyBuy.Site {
  @objc dynamic public var pickupConfig: FlyBuy.PickupConfig {
    @objc get
  }
}
@objc(FlyBuyGeofence) open class Geofence : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let latitude: Swift.String
  @objc final public let longitude: Swift.String
  @objc final public let radiusMeters: Swift.Double
  public func locationCoordinate() -> CoreLocation.CLLocationCoordinate2D?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc(FlyBuyCustomerInfo) open class CustomerInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let name: Swift.String
  @objc final public let carType: Swift.String?
  @objc final public let carColor: Swift.String?
  @objc final public let licensePlate: Swift.String?
  @objc final public let phone: Swift.String?
  @objc public init(name: Swift.String, carType: Swift.String?, carColor: Swift.String?, licensePlate: Swift.String?, phone: Swift.String? = nil)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
final public class PersistManager : FlyBuy.FlyBuyDBProtocol {
  public static let defaultDBPath: Swift.String
  public static var resetOnInit: Swift.Bool
  public static var shared: FlyBuy.PersistManager
  final public var dbManager: FlyBuy.FlyBuyDBManager
  final public var needsInit: Swift.Bool
  public init(atPath path: Swift.String = PersistManager.defaultDBPath, migrate: Swift.Bool = true)
  @objc deinit
}
@objc public enum LocationAuthStatus : Swift.Int, Swift.Codable {
  case notDetermined
  case restricted
  case denied
  case authorizedAlways
  case authorizedWhenInUse
  public init(from decoder: any Swift.Decoder) throws
  public init?(from authStatus: CoreLocation.CLAuthorizationStatus)
  public init?(from string: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum HTTPStatusCode : Swift.Int, Swift.Error {
  case `continue`
  case switchingProtocols
  case processing
  case ok
  case created
  case accepted
  case nonAuthoritativeInformation
  case noContent
  case resetContent
  case partialContent
  case multiStatus
  case alreadyReported
  case IMUsed
  case multipleChoices
  case movedPermanently
  case found
  case seeOther
  case notModified
  case useProxy
  case switchProxy
  case temporaryRedirect
  case permenantRedirect
  case badRequest
  case unauthorized
  case paymentRequired
  case forbidden
  case notFound
  case methodNotAllowed
  case notAcceptable
  case proxyAuthenticationRequired
  case requestTimeout
  case conflict
  case gone
  case lengthRequired
  case preconditionFailed
  case payloadTooLarge
  case URITooLong
  case unsupportedMediaType
  case rangeNotSatisfiable
  case expectationFailed
  case teapot
  case misdirectedRequest
  case unprocessableEntity
  case locked
  case failedDependency
  case appUpgradeRequired
  case upgradeRequired
  case preconditionRequired
  case tooManyRequests
  case requestHeaderFieldsTooLarge
  case noResponse
  case unavailableForLegalReasons
  case SSLCertificateError
  case SSLCertificateRequired
  case HTTPRequestSentToHTTPSPort
  case clientClosedRequest
  case internalServerError
  case notImplemented
  case badGateway
  case serviceUnavailable
  case gatewayTimeout
  case HTTPVersionNotSupported
  case variantAlsoNegotiates
  case insufficientStorage
  case loopDetected
  case notExtended
  case networkAuthenticationRequired
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class PickupTypeConfig : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let pickupType: Swift.String
  @objc final public let pickupTypeLocalizedString: Swift.String
  @objc final public let showVehicleInfoFields: Swift.Bool
  @objc final public let showHandoffVehicleLocations: Swift.Bool
  @objc public var requireVehicleInfo: Swift.Bool {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class PickupConfig : ObjectiveC.NSObject, Swift.Codable {
  @objc public var type: Swift.String
  @objc final public let id: Swift.Int
  @objc final public let customerNameEditingEnabled: Swift.Bool
  @objc final public let pickupTypeSelectionEnabled: Swift.Bool
  @objc final public let askToAskImageURL: Swift.String?
  @objc final public let accentColor: Swift.String
  @objc final public let accentTextColor: Swift.String
  @objc final public let termsOfServiceURL: Swift.String?
  @objc final public let privacyPolicyURL: Swift.String?
  @objc final public let availablePickupTypes: [FlyBuy.PickupTypeConfig]
  @objc final public let availableHandoffVehicleLocation: [FlyBuy.AvailableHandoffVehicleLocation]
  @objc final public let orderProgressStates: [FlyBuy.OrderProgressState]
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension FlyBuy.PickupConfig : FlyBuy.PersistableCodable {
  public static var createTable: Swift.String {
    get
  }
  public static var upsert: Swift.String {
    get
  }
  public static var fetchAll: Swift.String {
    get
  }
  public static var deleteAll: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class WrongSiteArrivalConfig : ObjectiveC.NSObject, Swift.Codable {
  public var siteLimit: Swift.Int?
  public var worstAccuracyLimit: Swift.Double?
  public static let defaultSiteLimit: Swift.Int
  public static let defaultWorstAccuracyLimit: Swift.Double
  public static let defaultWrongSiteSearchRadius: Swift.Double
  public var sitesFetchLatitudePrecision: Swift.Int {
    get
  }
  public var sitesFetchLongitudePrecision: Swift.Int {
    get
  }
  public static let defaultGeoPrecision: Swift.Int
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public typealias ResultType<T> = Swift.Result<T, any Swift.Error>
public struct VoidResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  case put
  case patch
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EncodingType {
  case url
  case json
  public static func == (a: FlyBuy.EncodingType, b: FlyBuy.EncodingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol BaseApiRequest {
  var requestEndPoint: Swift.String { get }
  var requestType: FlyBuy.HTTPMethod { get }
  var encoding: FlyBuy.EncodingType { get }
  var headers: [Swift.String : Swift.String]? { get }
  var requestBody: Foundation.Data? { get }
}
extension FlyBuy.BaseApiRequest {
  public var encoding: FlyBuy.EncodingType {
    get
  }
  public var requestBody: Foundation.Data? {
    get
  }
  public var headers: [Swift.String : Swift.String]? {
    get
  }
}
public protocol CodableRequest : FlyBuy.BaseApiRequest {
  associatedtype Response : Swift.Decodable
  associatedtype ErrorType : Swift.Decodable, Swift.Error
  var baseURL: Swift.String? { get }
  var decoder: Foundation.JSONDecoder { get }
  var apiToken: Swift.String? { get }
  var queryParams: [Swift.String : Swift.String]? { get }
}
extension FlyBuy.CodableRequest {
  public typealias ErrorType = FlyBuy.RuntimeError
  public var baseURL: Swift.String? {
    get
  }
  public var decoder: Foundation.JSONDecoder {
    get
  }
  public var apiToken: Swift.String? {
    get
  }
  public var queryParams: [Swift.String : Swift.String]? {
    get
  }
}
open class EncodableRequest<EncodableObject> where EncodableObject : Swift.Encodable {
  final public let object: EncodableObject
  final public let encoder: Foundation.JSONEncoder
  public init(object: EncodableObject, encoder: Foundation.JSONEncoder = JSONEncoder.iso8601FullLocalTZ)
  public var requestBody: Foundation.Data? {
    get
  }
  @objc deinit
}
extension FlyBuy.BaseApiRequest {
  public var latestApi: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(FlyBuyPagination) public class Pagination : ObjectiveC.NSObject {
  @objc final public let currentPage: Swift.Int
  @objc final public let totalPages: Swift.Int
  @objc deinit
}
@objc public class OrderProgressState : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let state: Swift.String
  @objc final public let stateLocalizedString: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc(FlyBuyOrderEvent) open class OrderEvent : ObjectiveC.NSObject, Swift.Encodable {
  public init(orderID: Swift.Int, location: CoreLocation.CLLocation, beacons: [FlyBuy.Beacon], etaSeconds: Foundation.NSNumber?, etaSource: Swift.String?, possibleWrongSiteId: Swift.Int?, clientEtaExpiry: Swift.Int?, clientEtaAttempted: Swift.Bool?, clientEtaLog: Swift.String?)
  public init(orderID: Swift.Int, customerState: Swift.String, etaSeconds: Foundation.NSNumber?, etaSource: Swift.String?, location: CoreLocation.CLLocation? = nil)
  public init(orderID: Swift.Int, customerState: Swift.String, spotIdentifier: Swift.String?, location: CoreLocation.CLLocation?)
  public init(orderID: Swift.Int, state: Swift.String, location: CoreLocation.CLLocation? = nil)
  public init(orderID: Swift.Int, locationAuthStatus: FlyBuy.LocationAuthStatus)
  public init(orderID: Swift.Int, customerRating: Swift.Int, customerComments: Swift.String?)
  public init(orderID: Swift.Int, pickupType: Swift.String)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc(FlyBuyCoordinate) public class Coordinate : ObjectiveC.NSObject {
  final public let latitude: Swift.Double
  final public let longitude: Swift.Double
  @objc deinit
}
public struct AppConfigData : Swift.Codable {
  public let pickupLocationFilters: FlyBuy.PickupLocationFilters?
  public let pickupStates: FlyBuy.PickupStates?
  public let notifyMaxSites: Swift.Int?
  public let nearbySitesFeatureUrl: Swift.String?
  public let upgrade: FlyBuy.AppUpgrade?
  public let notify: FlyBuy.NotifyConfig?
  public let wrongSiteArrivalConfig: FlyBuy.WrongSiteArrivalConfig?
  public let etaSettings: FlyBuy.ETAConfig?
  public let places: FlyBuy.PlacesConfig?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
open class BaseAPIService {
  public init()
  public func execute<Request>(_ request: Request, withCompletion completion: @escaping (FlyBuy.ResultType<Request.Response>) -> Swift.Void) where Request : FlyBuy.CodableRequest
  @objc deinit
}
public struct BeaconRegion : Swift.Codable, Swift.Hashable {
  public let uuid: Foundation.UUID
  public let major: Swift.UInt16?
  public let minor: Swift.UInt16?
  public func region() -> CoreLocation.CLBeaconRegion
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: FlyBuy.BeaconRegion, b: FlyBuy.BeaconRegion) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public protocol FlyBuyModuleManager {
  func configUpdated(_ config: FlyBuy.AppConfig, pushData: FlyBuy.PushData?)
  func set(logLevel: FlyBuy.LogLevel)
  func ordersUpdated(_ orders: [FlyBuy.Order])
}
extension FlyBuy.FlyBuyModuleManager {
  public func ordersUpdated(_ orders: [FlyBuy.Order])
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(FlyBuyCore) public class Core : ObjectiveC.NSObject {
  @objc public static let orders: FlyBuy.OrdersManager
  @objc public static let customer: FlyBuy.CustomerManager
  @objc public static let sites: FlyBuy.SitesManager
  @objc public static let places: FlyBuy.PlacesManager
  @objc public static let logger: FlyBuy.Logger
  public static var isCoreConfigured: Swift.Bool {
    get
  }
  public static var deferredLocationTracking: Swift.Bool {
    get
  }
  @objc public static func setAppInstanceIDUpdatedListener(callback: ((Foundation.UUID) -> (Swift.Void))? = nil)
  @available(*, deprecated, message: "This method for configuring Flybuy Core has been deprecated. Use FlyBuy.Core.configure(withOptions configOptions: ConfigOptions) instead.")
  @objc public static func configure(_ opts: [Swift.String : Any])
  @objc public static func configure(withOptions configOptions: FlyBuy.ConfigOptions)
  public static func appInstanceID() -> Foundation.UUID
  @objc public static func handleRemoteNotification(_ data: [Swift.AnyHashable : Any])
  @objc public static func updatePushToken(_ newPushToken: Swift.String)
  @objc public static func updateAPNPushToken(_ deviceToken: Foundation.Data)
  public static func cancelRunningURLSessions()
  @objc deinit
}
public struct RuntimeError : Swift.Error, Swift.Codable {
  public var localizedDescription: Swift.String {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Error {
  public var message: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(FlyBuyCircularRegion) public class FlyBuyCircularRegion : FlyBuy.FlyBuyRegion {
  @objc public init(latitude: Swift.Double, longitude: Swift.Double, radius: Swift.Double, identifier: Swift.String = UUID().uuidString)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FlyBuyOrderOptions) public class OrderOptions : ObjectiveC.NSObject {
  @objc final public let customerName: Swift.String
  @objc final public let customerPhone: Swift.String?
  @objc final public let customerCarColor: Swift.String?
  @objc final public let customerCarType: Swift.String?
  @objc final public let customerCarLicensePlate: Swift.String?
  @objc final public let partnerIdentifier: Swift.String
  @objc final public let pickupWindow: FlyBuy.PickupWindow?
  @objc final public let state: Swift.String?
  @objc final public let pickupType: Swift.String?
  @objc final public let spotIdentifier: Swift.String?
  @objc final public let handoffVehicleLocation: Swift.String?
  @objc(FlyBuyOrderOptionsBuilder) public class Builder : ObjectiveC.NSObject {
    @objc public init(customerName: Swift.String)
    @objc public func setCustomerName(_ name: Swift.String) -> FlyBuy.OrderOptions.Builder
    @objc public func setCustomerPhone(_ customerPhone: Swift.String?) -> FlyBuy.OrderOptions.Builder
    @objc public func setCustomerCarColor(_ customerCarColor: Swift.String?) -> FlyBuy.OrderOptions.Builder
    @objc public func setCustomerCarType(_ customerCarType: Swift.String?) -> FlyBuy.OrderOptions.Builder
    @objc public func setCustomerCarPlate(_ customerCarPlate: Swift.String?) -> FlyBuy.OrderOptions.Builder
    @objc public func setPartnerIdentifier(_ partnerIdentifier: Swift.String?) -> FlyBuy.OrderOptions.Builder
    @objc public func setPickupWindow(_ pickupWindow: FlyBuy.PickupWindow?) -> FlyBuy.OrderOptions.Builder
    @objc public func setState(_ state: Swift.String?) -> FlyBuy.OrderOptions.Builder
    @objc public func setPickupType(_ pickupType: Swift.String?) -> FlyBuy.OrderOptions.Builder
    @objc public func setSpotIdentifier(_ spotIdentifier: Swift.String?) -> FlyBuy.OrderOptions.Builder
    @objc public func setHandoffVehicleLocation(_ handoffVehicleLocation: Swift.String?) -> FlyBuy.OrderOptions.Builder
    @objc public func build() -> FlyBuy.OrderOptions
    @objc deinit
  }
  @objc deinit
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension FlyBuy._AnyDecodable {
  public init(from decoder: any Swift.Decoder) throws
}
@objc(FlyBuySiteOptions) public class SiteOptions : ObjectiveC.NSObject {
  @objc final public let operationalStatus: Swift.String
  final public let page: Swift.Int?
  final public let per: Swift.Int?
  public init(operationalStatus: Swift.String, page: Swift.Int?, per: Swift.Int?)
  @_inheritsConvenienceInitializers @objc(FlyBuySiteOptionsBuilder) public class Builder : ObjectiveC.NSObject {
    @objc public func setOperationalStatus(_ operationalStatus: Swift.String)
    @objc public func setPage(_ page: Swift.Int)
    @objc public func setPer(_ per: Swift.Int)
    @objc public func build() -> FlyBuy.SiteOptions
    @objc override dynamic public init()
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FlyBuyBeaconRegion) public class FlyBuyBeaconRegion : FlyBuy.FlyBuyRegion {
  @objc public init(uuid: Foundation.UUID, major: Swift.UInt16, minor: Swift.UInt16, identifier: Swift.String = UUID().uuidString)
  @objc deinit
}
final public class FlyBuyDBManager {
  final public var dbVersion: Swift.Int {
    get
    set
  }
  public init(atPath path: Swift.String)
  final public func fetchAll<T>(_ type: [T].Type) throws -> [T] where T : FlyBuy.PersistableCodable
  final public func fetch<T>(_ type: [T].Type, using sql: Swift.String) throws -> [T] where T : FlyBuy.PersistableCodable
  final public func save<T>(_ value: T) throws where T : FlyBuy.PersistableCodable
  final public func deleteAll<T>(_ type: T.Type) throws where T : FlyBuy.PersistableCodable
  final public func execute(raw: Swift.String) throws
  @objc deinit
}
public protocol FlyBuyDBProtocol {
  var dbManager: FlyBuy.FlyBuyDBManager { get }
}
extension FlyBuy.FlyBuyDBProtocol {
  public func fetchAll<T>(_ type: [T].Type) throws -> [T] where T : FlyBuy.PersistableCodable
  public func fetch<T>(_ type: [T].Type, using sql: Swift.String) throws -> [T] where T : FlyBuy.PersistableCodable
  public func save<T>(_ value: T) throws where T : FlyBuy.PersistableCodable
  public func deleteAll<T>(_ type: T.Type) throws where T : FlyBuy.PersistableCodable
  public func execute(sql: Swift.String) throws
  public func dbClose()
}
public protocol PersistableCodable : Swift.Decodable, Swift.Encodable {
  static var createTable: Swift.String { get }
  static var upsert: Swift.String { get }
  static var fetchAll: Swift.String { get }
  static var deleteAll: Swift.String { get }
}
extension FlyBuy.PersistableCodable {
  public static func fetchAll(persistManager: any FlyBuy.FlyBuyDBProtocol = PersistManager.shared) throws -> [Self]
  public func save(persistManager: any FlyBuy.FlyBuyDBProtocol = PersistManager.shared) throws
  public static func deleteAll(persistManager: any FlyBuy.FlyBuyDBProtocol = PersistManager.shared) throws
}
extension Foundation.JSONDecoder {
  public static let iso8601Full: Foundation.JSONDecoder
}
extension Foundation.JSONEncoder {
  public static let iso8601FullLocalTZ: Foundation.JSONEncoder
}
extension Foundation.DateFormatter {
  public static let iso8601Full: Foundation.DateFormatter
  public static let iso8601FullLocalTZ: Foundation.DateFormatter
}
extension Swift.Double {
  public func round(to places: Swift.Int) -> Swift.Double
}
@_hasMissingDesignatedInitializers @objc(FlyBuyCustomer) open class Customer : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let id: Swift.Int
  @objc final public let token: Swift.String
  @objc final public let emailAddress: Swift.String?
  @objc final public let info: FlyBuy.CustomerInfo
  @objc public var registered: Swift.Bool {
    @objc get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public struct PlacesConfig : Swift.Codable {
  public let suggestionRequestDelayMs: Swift.Int
  public let mapboxAccessToken: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class ETAConfig : ObjectiveC.NSObject, Swift.Codable {
  public static let defaultMinimumETACacheInterval: Swift.Int
  public static let defaultCacheFilterETASecondsMultiplier: Swift.Double
  public static let defaultETASource: Swift.String
  public var minimumETACacheInterval: Swift.Int
  public var cacheFilterETASecondsMultiplier: Swift.Double
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(FlyBuyPlacesManager) open class PlacesManager : ObjectiveC.NSObject {
  @objc public func suggest(query: Swift.String, options: FlyBuy.PlaceSuggestionOptions, callback: (([FlyBuy.Place]?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func retrieve(place: FlyBuy.Place, callback: ((FlyBuy.Coordinate?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc override dynamic public init()
  @objc deinit
}
public protocol FlyBuyError : Foundation.LocalizedError {
  var description: Swift.String { get }
  var errorDescription: Swift.String? { get }
}
@objc public enum FlyBuyAPIErrorType : Swift.Int {
  case invalidResponse
  case responseError
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(FlyBuyAPIError) public class FlyBuyAPIError : ObjectiveC.NSObject, FlyBuy.FlyBuyError {
  @objc final public let type: FlyBuy.FlyBuyAPIErrorType
  @objc final public let statusCodeInt: Swift.Int
  final public let statusCode: FlyBuy.HTTPStatusCode?
  public var errorDescription: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public class AvailableHandoffVehicleLocation : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let vehicleLocation: Swift.String
  @objc final public let vehicleLocationLocalizedString: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Array where Element : FlyBuy.AvailableHandoffVehicleLocation {
  public func get(forVehicleLocation location: Swift.String) -> FlyBuy.AvailableHandoffVehicleLocation?
}
@objc(FlyBuyPickupWindow) public class PickupWindow : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let start: Foundation.Date
  @objc final public let end: Foundation.Date
  @objc public init(start: Foundation.Date, end: Foundation.Date)
  @objc convenience public init(_ date: Foundation.Date)
  required convenience public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func formattedString(locale: Foundation.Locale = Locale.current) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(FlyBuySitesManager) open class SitesManager : ObjectiveC.NSObject {
  @available(*, deprecated, message: "This method for fetching sites has been deprecated. Use FlyBuy.Core.sites.fetchByPartnerIdentifier instead.")
  @objc public var all: [FlyBuy.Site]? {
    get
  }
  @objc public func fetchByPartnerIdentifier(partnerIdentifier: Swift.String, options: FlyBuy.SiteOptions, callback: ((FlyBuy.Site?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc public func fetch(region: FlyBuy.FlyBuyCircularRegion, options: FlyBuy.SiteOptions, callback: (([FlyBuy.Site]?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc public func fetchNear(place: FlyBuy.Place, radius: Swift.Double, options: FlyBuy.SiteOptions, callback: (([FlyBuy.Site]?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum SitesManagerErrorType : Swift.Int {
  case coreIsNotConfigured
  case mapboxTokenIsMissing
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(FlyBuySitesManagerError) public class SitesManagerError : ObjectiveC.NSObject, FlyBuy.FlyBuyError {
  @available(*, deprecated, message: "Please use 'description' instead.")
  @objc public var errorDescription: Swift.String? {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension FlyBuy.SitesManager {
  @objc dynamic public func fetchByPartnerIdentifier(partnerIdentifier: Swift.String, callback: ((FlyBuy.Site?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc dynamic public func fetchByPartnerIdentifier(partnerIdentifier: Swift.String, operationalStatus: Swift.String = "live", callback: ((FlyBuy.Site?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @available(*, deprecated, message: "This method for fetching sites has been deprecated. Use FlyBuy.Core.sites.fetchByPartnerIdentifier instead.")
  @objc dynamic public func fetch(query: Swift.String? = nil, page: Swift.Int = 1, callback: (([FlyBuy.Site]?, FlyBuy.Pagination?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @available(*, deprecated, message: "This method for fetching sites has been deprecated. Use FlyBuy.Core.sites.fetchByPartnerIdentifier instead.")
  @objc dynamic public func fetch(query: Swift.String? = nil, page: Swift.Int = 1, operationalStatus: Swift.String = "live", callback: (([FlyBuy.Site]?, FlyBuy.Pagination?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @available(*, deprecated, message: "This method for fetching sites has been deprecated. Use FlyBuyCore.sites.fetchByPartnerIdentifier instead.")
  @objc dynamic public func fetchAll(query: Swift.String? = nil, callback: (([FlyBuy.Site]?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @available(*, deprecated, message: "This method for fetching sites has been deprecated. Use FlyBuy.Core.sites.fetch(region:, options:) instead.")
  @objc dynamic public func fetch(region: CoreLocation.CLCircularRegion, page: Swift.Int = 1, operationalStatus: Swift.String = "live", callback: (([FlyBuy.Site]?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @available(*, deprecated, message: "This method for fetching sites has been deprecated. Use FlyBuy.Core.sites.fetch(region:, options:) instead.")
  @objc dynamic public func fetch(region: CoreLocation.CLCircularRegion, page: Swift.Int, per: Swift.Int, callback: (([FlyBuy.Site]?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @available(*, deprecated, message: "This method for fetching sites has been deprecated. Use FlyBuy.Core.sites.fetch(region:, options:) instead.")
  @objc dynamic public func fetch(region: CoreLocation.CLCircularRegion, page: Swift.Int, per: Swift.Int, operationalStatus: Swift.String = "live", callback: (([FlyBuy.Site]?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @available(*, deprecated, message: "This method for fetching sites has been deprecated. Use FlyBuy.Core.sites.fetch(region:, options:) instead.")
  @objc dynamic public func fetch(region: CoreLocation.CLCircularRegion, page: Swift.Int = 1, callback: (([FlyBuy.Site]?, (any Swift.Error)?) -> (Swift.Void))? = nil)
}
public enum RemoteNotificationMessageType : Swift.String {
  case backgroundSync
  case orderUpdate
  case appInstanceDeleted
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PushData {
  public let messageType: FlyBuy.RemoteNotificationMessageType?
  public let forceSyncNotifyCampaigns: Swift.Bool
}
public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension FlyBuy.AnyCodable : FlyBuy._AnyEncodable, FlyBuy._AnyDecodable {
}
extension FlyBuy.AnyCodable : Swift.Equatable {
  public static func == (lhs: FlyBuy.AnyCodable, rhs: FlyBuy.AnyCodable) -> Swift.Bool
}
extension FlyBuy.AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension FlyBuy.AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension FlyBuy.AnyCodable : Swift.ExpressibleByNilLiteral {
}
extension FlyBuy.AnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension FlyBuy.AnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension FlyBuy.AnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension FlyBuy.AnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension FlyBuy.AnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension FlyBuy.AnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension Swift.Optional where Wrapped == Swift.String {
  public var presence: Swift.String? {
    get
  }
}
extension Swift.String {
  public var wordsFromCamelCase: Swift.String {
    get
  }
  public var isBlank: Swift.Bool {
    get
  }
  public func removeDirectory()
}
@objc public enum PlaceType : Swift.Int {
  case address
  case region
  case postalcode
  case city
  case poi
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(FlyBuyPlaceOptions) public class PlaceSuggestionOptions : ObjectiveC.NSObject {
  @objc final public let latitude: Swift.Double
  @objc final public let longitude: Swift.Double
  @objc final public let type: FlyBuy.PlaceType
  public init(latitude: Swift.Double, longitude: Swift.Double, type: FlyBuy.PlaceType)
  @_inheritsConvenienceInitializers @objc(FlyBuyPlaceOptionsBuilder) public class Builder : ObjectiveC.NSObject {
    @objc public func setProximity(latitude: Swift.Double, longitude: Swift.Double) -> FlyBuy.PlaceSuggestionOptions.Builder
    @objc public func setType(_ type: FlyBuy.PlaceType) -> FlyBuy.PlaceSuggestionOptions.Builder
    @objc public func build() -> FlyBuy.PlaceSuggestionOptions
    @objc override dynamic public init()
    @objc deinit
  }
  @objc deinit
}
@objc public class AppUpgrade : ObjectiveC.NSObject, Swift.Codable {
  final public let required: Swift.Bool
  final public let url: Swift.String
  final public let version: Swift.String
  final public let message: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct PickupStates : Swift.Codable {
  public let order: [Swift.String]?
  public let openOrder: [Swift.String]?
  public let deferredOrder: [Swift.String]?
  public let customer: [Swift.String]?
  public let openCustomer: [Swift.String]?
  public let deferredCustomer: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(FlyBuyOrdersManager) open class OrdersManager : ObjectiveC.NSObject {
  @objc public var all: [FlyBuy.Order] {
    @objc get
  }
  @objc public var open: [FlyBuy.Order] {
    @objc get
  }
  @objc public var closed: [FlyBuy.Order] {
    @objc get
  }
  @objc public var orderStates: [Swift.String]
  public var deferredOrderStates: [Swift.String]
  @objc public var customerStates: [Swift.String]
  public var deferredCustomerStates: [Swift.String]
  @objc override dynamic public init()
  @objc public func fetch(callback: (([FlyBuy.Order]?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc public func fetch(withRedemptionCode redemptionCode: Swift.String, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc public func claim(withRedemptionCode redemptionCode: Swift.String, orderOptions: FlyBuy.OrderOptions, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @available(*, deprecated, message: "This method for claiming an order has been deprecated. Use claim(withRedemptionCode, orderOptions) instead.")
  @objc public func claim(withRedemptionCode redemptionCode: Swift.String, customerInfo: FlyBuy.CustomerInfo, pickupType: Swift.String? = nil, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @available(*, deprecated, message: "This method for creating an order has been deprecated. Use create(siteID, orderOptions) instead.")
  @objc public func create(sitePartnerIdentifier: Swift.String, orderPartnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, pickupWindow: FlyBuy.PickupWindow? = nil, state: Swift.String? = nil, pickupType: Swift.String? = nil, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))?)
  @available(*, deprecated, message: "This method for creating an order has been deprecated. Use create(siteID, orderOptions) instead.")
  @objc public func create(sitePartnerIdentifier: Swift.String, orderPartnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, pickupWindow: FlyBuy.PickupWindow? = nil, state: Swift.String, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))?)
  @available(*, deprecated, message: "This method for creating an order has been deprecated. Use create(siteID, orderOptions) instead.")
  @objc public func create(sitePartnerIdentifier: Swift.String, orderPartnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, pickupWindow: FlyBuy.PickupWindow? = nil, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))?)
  @available(*, deprecated, message: "This method for creating an order has been deprecated. Use create(siteID, orderOptions) instead.")
  @objc public func create(sitePartnerIdentifier: Swift.String, orderPartnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, pickupWindow: FlyBuy.PickupWindow? = nil, pickupType: Swift.String? = nil, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))?)
  @available(*, deprecated, message: "This method for creating an order has been deprecated. Use create(siteID, orderOptions) instead.")
  @objc public func create(sitePartnerIdentifier: Swift.String, orderPartnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, state: Swift.String?, pickupType: Swift.String? = nil, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))?)
  @available(*, deprecated, message: "This method for creating an order has been deprecated. Use create(siteID, orderOptions) instead.")
  @objc public func create(siteID: Swift.Int, partnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, pickupWindow: FlyBuy.PickupWindow? = nil, state: Swift.String, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))?)
  @available(*, deprecated, message: "This method for creating an order has been deprecated. Use create(siteID, orderOptions) instead.")
  @objc public func create(siteID: Swift.Int, partnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, pickupWindow: FlyBuy.PickupWindow? = nil, state: Swift.String, pickupType: Swift.String? = nil, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))?)
  @available(*, deprecated, message: "This method for creating an order has been deprecated. Use create(siteID, orderOptions) instead.")
  @objc public func create(siteID: Swift.Int, partnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, pickupWindow: FlyBuy.PickupWindow? = nil, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))?)
  @available(*, deprecated, message: "This method for creating an order has been deprecated. Use create(siteID, orderOptions) instead.")
  @objc public func create(siteID: Swift.Int, partnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, pickupWindow: FlyBuy.PickupWindow? = nil, pickupType: Swift.String? = nil, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))?)
  @available(*, deprecated, message: "This method for creating an order has been deprecated. Use create(siteID, orderOptions) instead.")
  @objc public func create(siteID: Swift.Int, partnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, state: Swift.String?, pickupType: Swift.String? = nil, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))?)
  @objc public func create(siteID: Swift.Int, orderOptions: FlyBuy.OrderOptions, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))?)
  @objc public func create(sitePartnerIdentifier: Swift.String, orderOptions: FlyBuy.OrderOptions, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))?)
  @objc public func event(info: FlyBuy.OrderEvent, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> ())? = nil)
  @objc public func updateCustomerState(orderID: Swift.Int, customerState: Swift.String, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc public func updateCustomerState(orderID: Swift.Int, customerState: Swift.String, spotIdentifier: Swift.String?, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc public func updateOrderState(orderID: Swift.Int, state: Swift.String, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc public func rateOrder(orderID: Swift.Int, rating: Swift.Int, comments: Swift.String? = nil, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc public func updatePickupType(orderID: Swift.Int, pickupType: Swift.String, callback: ((FlyBuy.Order?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let ordersUpdated: Foundation.Notification.Name
  public static let ordersError: Foundation.Notification.Name
  public static let orderUpdated: Foundation.Notification.Name
  public static let orderEventError: Foundation.Notification.Name
}
@objc public enum OrdersManagerErrorType : Swift.Int {
  case orderNotFound
  case loadingCustomer
  case loadingApiUrl
  case alreadyFetching
  case invalidCustomerState
  case invalidOrderState
  case coreIsNotConfigured
  case invalidPickupType
  case orderIsNotOpen
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(FlyBuyOrdersManagerError) public class OrdersManagerError : ObjectiveC.NSObject, FlyBuy.FlyBuyError {
  @available(*, deprecated, message: "Please use 'description' instead.")
  @objc public var errorDescription: Swift.String? {
    @objc get
  }
  @objc final public let type: FlyBuy.OrdersManagerErrorType
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension FlyBuy.OrdersManager : CoreLocation.CLLocationManagerDelegate {
}
@_inheritsConvenienceInitializers @objc(FlyBuyCustomerManager) public class CustomerManager : ObjectiveC.NSObject {
  @objc public var current: FlyBuy.Customer? {
    @objc get
  }
  @objc public func create(_ customerInfo: FlyBuy.CustomerInfo, termsOfService: Swift.Bool, ageVerification: Swift.Bool, callback: ((FlyBuy.Customer?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc public func create(_ customerInfo: FlyBuy.CustomerInfo, email: Swift.String, password: Swift.String, customerConsent: FlyBuy.CustomerConsent, callback: ((FlyBuy.Customer?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc public func update(_ customerInfo: FlyBuy.CustomerInfo, callback: ((FlyBuy.Customer?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc public func login(emailAddress: Swift.String, password: Swift.String, callback: ((FlyBuy.Customer?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc public func loginWithToken(token: Swift.String, callback: ((FlyBuy.Customer?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc public func signUp(emailAddress: Swift.String, password: Swift.String, callback: ((FlyBuy.Customer?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc public func requestNewPassword(emailAddress: Swift.String, callback: (((any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc public func setNewPassword(resetPasswordToken: Swift.String, password: Swift.String, confirmation: Swift.String, callback: ((FlyBuy.Customer?, (any Swift.Error)?) -> (Swift.Void))? = nil)
  @objc public func logout()
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum CustomerManagerErrorType : Swift.Int {
  case loadingApiUrl
  case loadingCustomer
  case missingCustomerConsent
  case coreIsNotConfigured
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(FlyBuyCustomerManagerError) public class CustomerManagerError : ObjectiveC.NSObject, FlyBuy.FlyBuyError {
  @available(*, deprecated, message: "Please use 'description' instead.")
  @objc public var errorDescription: Swift.String? {
    @objc get
  }
  @objc final public let type: FlyBuy.CustomerManagerErrorType
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum LogLevel : Swift.Int {
  case verbose
  case debug
  case info
  case warning
  case error
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(FlyBuyLogger) final public class Logger : ObjectiveC.NSObject {
  final public var logLevel: FlyBuy.LogLevel
  final public var writeEnabled: Swift.Bool
  public init(name: Swift.String = "FlyBuySDK")
  final public func verbose(_ message: Any = "", filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  final public func debug(_ message: Any = "", filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  final public func info(_ message: Any = "", filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  final public func warning(_ message: Any = "", filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  final public func error(_ message: Any = "", filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FlyBuyConfigOptions) public class ConfigOptions : ObjectiveC.NSObject {
  @objc public static func Builder(token: Swift.String) -> FlyBuy.ConfigOptionsBuilder
  @objc deinit
}
@objc(FlyBuyConfigOptionsBuilder) public class ConfigOptionsBuilder : ObjectiveC.NSObject {
  @objc public init(token: Swift.String)
  @objc public func build() -> FlyBuy.ConfigOptions
  @objc public func setLogLevel(_ logLevel: FlyBuy.LogLevel) -> FlyBuy.ConfigOptionsBuilder
  @objc public func setDeferredLocationTracking(_ enabled: Swift.Bool) -> FlyBuy.ConfigOptionsBuilder
  @objc public func setOptions(_ opts: [Swift.String : Any]) -> FlyBuy.ConfigOptionsBuilder
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(FlyBuyLinks) public class Links : ObjectiveC.NSObject {
  @objc public static func parse(url: Foundation.URL) -> FlyBuy.LinkDetails
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FlyBuyRegion) public class FlyBuyRegion : ObjectiveC.NSObject {
  @objc deinit
}
@objc(FlyBuyOrder) open class Order : ObjectiveC.NSObject {
  @objc final public let id: Swift.Int
  @objc final public let siteID: Swift.Int
  @objc public var state: Swift.String
  @objc public var customerState: Swift.String
  @objc final public let partnerIdentifier: Swift.String?
  @objc final public let redemptionCode: Swift.String?
  @objc final public let redeemedAt: Foundation.Date?
  @objc final public let displayName: Swift.String?
  @objc final public let pickupWindow: FlyBuy.PickupWindow?
  @objc public var pickupType: Swift.String?
  @objc public var etaAt: Foundation.Date?
  @objc public var completedAt: Foundation.Date?
  @objc public var createdAt: Foundation.Date?
  @objc public var updatedAt: Foundation.Date?
  @objc public var orderFiredAt: Foundation.Date?
  @objc public var customerRating: Swift.String?
  @objc public var customerComment: Swift.String?
  @objc final public let siteName: Swift.String?
  @objc final public let sitePhone: Swift.String?
  @objc final public let siteStreetAddress: Swift.String?
  @objc final public let siteFullAddress: Swift.String?
  @objc final public let siteLocality: Swift.String?
  @objc final public let siteRegion: Swift.String?
  @objc final public let siteCountry: Swift.String?
  @objc final public let sitePostalCode: Swift.String?
  @objc final public let siteLongitude: Swift.String?
  @objc final public let siteLatitude: Swift.String?
  @objc final public let siteInstructions: Swift.String?
  @objc final public let siteDescription: Swift.String?
  @objc final public let siteCoverPhotoURL: Swift.String?
  final public let siteBeaconRegions: [FlyBuy.BeaconRegion]?
  @objc final public let sitePartnerIdentifier: Swift.String?
  @available(*, deprecated, message: "Use order.sitePickupConfig.projectAccentColor instead")
  @objc final public let projectAccentColor: Swift.String?
  @available(*, deprecated, message: "Use order.sitePickupConfig.projectAccentTextColor instead")
  @objc final public let projectAccentTextColor: Swift.String?
  @objc final public let projectLogoURL: Swift.String?
  @objc final public let customerName: Swift.String?
  @objc final public let customerCarType: Swift.String?
  @objc final public let customerCarColor: Swift.String?
  @objc final public let customerLicensePlate: Swift.String?
  @available(*, deprecated, message: "Use showVehicleInfoFields for the pickup type in sitePickupConfig.availablePickupTypes")
  @objc final public let projectMobileFlowAlwaysShowVehicleInfoFields: Swift.Bool
  @available(*, deprecated, message: "Use order.sitePickupConfig.customerNameEditingEnabled instead")
  @objc final public let projectMobileFlowCustomerNameEditingEnabled: Swift.Bool
  @available(*, deprecated, message: "Use order.sitePickupConfig.pickupTypeSelectionEnabled instead")
  @objc final public let projectMobileFlowPickupTypeSelectionEnabled: Swift.Bool
  @available(*, deprecated, message: "Use requiredVehicleInfo for the pickup type in sitePickupConfig.availablePickupTypes")
  @objc final public let projectMobileFlowRequireVehicleInfoIfVisible: Swift.Bool
  @available(*, deprecated, message: "Use pickupTypeLocalizedString for the pickup type in sitePickupConfig.availablePickupTypes")
  @objc final public let curbsideLocalizedString: Swift.String?
  @available(*, deprecated, message: "Use pickupTypeLocalizedString for the pickup type in sitePickupConfig.availablePickupTypes")
  @objc final public let pickupLocalizedString: Swift.String?
  @objc public var pushToken: Swift.String?
  public var isLocationTrackingEnabled: Swift.Bool?
  public var spotIdentifierEntryEnabled: Swift.Bool?
  @objc public var spotIdentifer: Swift.String?
  @objc public var spotIdentifierInputType: Swift.String?
  @objc final public let partnerIdentifierForCustomer: Swift.String?
  @objc final public let partnerIdentifierForCrew: Swift.String?
  @objc public var wrongSiteDetectionEnabled: Swift.Bool {
    @objc get
  }
  public var wrongSiteId: Swift.Int?
  @objc public var distanceFilteringDisabled: Swift.Bool {
    @objc get
  }
  @objc public var wrongSiteSearchRadius: Foundation.NSNumber? {
    @objc get
  }
  final public let _pickupConfigID: Swift.Int?
  final public let handoffVehicleLocation: Swift.String?
  public var estimatedReadyAt: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func siteLocation() -> CoreLocation.CLLocation?
  @objc public func siteDistance(from location: CoreLocation.CLLocation) -> Foundation.NSNumber?
  @objc public var customerID: Foundation.NSNumber? {
    @objc get
  }
  @objc public var sitePrearrivalSeconds: Foundation.NSNumber? {
    @objc get
  }
  @objc deinit
}
extension FlyBuy.Order : FlyBuy.PersistableCodable {
  public static var createTable: Swift.String {
    get
  }
  public static var upsert: Swift.String {
    get
  }
  public static var fetchAll: Swift.String {
    get
  }
  public static var deleteAll: Swift.String {
    get
  }
}
extension FlyBuy.Order {
  @objc dynamic public func isOpen() -> Swift.Bool
  @objc dynamic public var sitePickupConfig: FlyBuy.PickupConfig {
    @objc get
  }
  @objc dynamic public var locationTrackingDeferred: Swift.Bool {
    @objc get
  }
}
extension FlyBuy.FlybuyLinkType : Swift.Equatable {}
extension FlyBuy.FlybuyLinkType : Swift.Hashable {}
extension FlyBuy.FlybuyLinkType : Swift.RawRepresentable {}
extension FlyBuy.LocationAuthStatus : Swift.Equatable {}
extension FlyBuy.LocationAuthStatus : Swift.Hashable {}
extension FlyBuy.LocationAuthStatus : Swift.RawRepresentable {}
extension FlyBuy.HTTPStatusCode : Swift.Equatable {}
extension FlyBuy.HTTPStatusCode : Swift.Hashable {}
extension FlyBuy.HTTPStatusCode : Swift.RawRepresentable {}
extension FlyBuy.HTTPMethod : Swift.Equatable {}
extension FlyBuy.HTTPMethod : Swift.Hashable {}
extension FlyBuy.HTTPMethod : Swift.RawRepresentable {}
extension FlyBuy.EncodingType : Swift.Equatable {}
extension FlyBuy.EncodingType : Swift.Hashable {}
extension FlyBuy.FlyBuyAPIErrorType : Swift.Equatable {}
extension FlyBuy.FlyBuyAPIErrorType : Swift.Hashable {}
extension FlyBuy.FlyBuyAPIErrorType : Swift.RawRepresentable {}
extension FlyBuy.SitesManagerErrorType : Swift.Equatable {}
extension FlyBuy.SitesManagerErrorType : Swift.Hashable {}
extension FlyBuy.SitesManagerErrorType : Swift.RawRepresentable {}
extension FlyBuy.RemoteNotificationMessageType : Swift.Equatable {}
extension FlyBuy.RemoteNotificationMessageType : Swift.Hashable {}
extension FlyBuy.RemoteNotificationMessageType : Swift.RawRepresentable {}
extension FlyBuy.PlaceType : Swift.Equatable {}
extension FlyBuy.PlaceType : Swift.Hashable {}
extension FlyBuy.PlaceType : Swift.RawRepresentable {}
extension FlyBuy.OrdersManagerErrorType : Swift.Equatable {}
extension FlyBuy.OrdersManagerErrorType : Swift.Hashable {}
extension FlyBuy.OrdersManagerErrorType : Swift.RawRepresentable {}
extension FlyBuy.CustomerManagerErrorType : Swift.Equatable {}
extension FlyBuy.CustomerManagerErrorType : Swift.Hashable {}
extension FlyBuy.CustomerManagerErrorType : Swift.RawRepresentable {}
extension FlyBuy.LogLevel : Swift.Equatable {}
extension FlyBuy.LogLevel : Swift.Hashable {}
extension FlyBuy.LogLevel : Swift.RawRepresentable {}

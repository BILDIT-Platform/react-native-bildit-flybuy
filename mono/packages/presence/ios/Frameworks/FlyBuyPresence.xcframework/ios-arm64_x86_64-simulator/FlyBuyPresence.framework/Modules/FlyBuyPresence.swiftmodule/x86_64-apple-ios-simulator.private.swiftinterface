// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FlyBuyPresence
import CoreBluetooth
import CoreLocation
import FlyBuy
@_exported import FlyBuyPresence
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc(FlyBuyPresenceManager) public class Manager : ObjectiveC.NSObject {
  @objc public static let shared: FlyBuyPresence.Manager
  @objc final public let maxPayloadSize: Swift.Int
  @objc public var presenceUUID: Foundation.UUID? {
    get
  }
  @objc public func configure(presenceUUID: Foundation.UUID)
  @objc deinit
  @objc public func createLocator(payload: Swift.String? = nil, callback: ((FlyBuyPresence.PresenceLocator?, (any Swift.Error)?) -> (Swift.Void)))
  @objc public func createLocatorWithIdentifier(_ presenceIdentifier: Foundation.Data, payload: Swift.String? = nil, callback: ((FlyBuyPresence.PresenceLocator?, (any Swift.Error)?) -> (Swift.Void)))
  @objc public func start(_ locator: FlyBuyPresence.PresenceLocator)
  @objc public func stop() -> ((any Swift.Error)?)
  @objc override dynamic public init()
}
extension FlyBuyPresence.Manager : FlyBuy.FlyBuyModuleManager {
  public func configUpdated(_ config: FlyBuy.AppConfig, pushData: FlyBuy.PushData?)
  public func set(logLevel: FlyBuy.LogLevel)
}
@objc public enum PresenceErrorType : Swift.Int {
  case invalidPresenceIdentifierLength
  case invalidPayloadLength
  case unableToCreateLocator
  case failedToStartAdvertising
  case advertiserAlreadyStarted
  case locatorNotStarted
  case bluetoothPoweredOff
  case bluetoothUnauthorized
  case bluetoothUnsupported
  case presenceManagerNotConfigured
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(FlyBuyPresenceError) public class PresenceError : ObjectiveC.NSObject, FlyBuy.FlyBuyError {
  @objc final public let type: FlyBuyPresence.PresenceErrorType
  @objc public init(_ typeIn: FlyBuyPresence.PresenceErrorType)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum LocatorEvent : Swift.UInt8 {
  case confirmed = 1
  case error = 2
  case present = 3
  case received = 4
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public protocol PresenceLocatorDelegate {
  @objc optional func locatorDidStart(_ locator: FlyBuyPresence.PresenceLocator)
  @objc optional func locatorDidStop(_ locator: FlyBuyPresence.PresenceLocator)
  @objc optional func locatorDidFail(_ locator: FlyBuyPresence.PresenceLocator, error: any Swift.Error)
  @objc optional func locator(_ locator: FlyBuyPresence.PresenceLocator, didReceiveEvent type: Swift.UInt8)
}
@_hasMissingDesignatedInitializers @objc public class PresenceLocator : ObjectiveC.NSObject {
  @objc final public let uuid: Foundation.UUID
  @objc final public let identifier: Foundation.Data
  @objc final public let payload: Swift.String?
  @objc public var delegate: (any FlyBuyPresence.PresenceLocatorDelegate)?
  @objc deinit
}
extension FlyBuyPresence.PresenceErrorType : Swift.Equatable {}
extension FlyBuyPresence.PresenceErrorType : Swift.Hashable {}
extension FlyBuyPresence.PresenceErrorType : Swift.RawRepresentable {}
extension FlyBuyPresence.LocatorEvent : Swift.Equatable {}
extension FlyBuyPresence.LocatorEvent : Swift.Hashable {}
extension FlyBuyPresence.LocatorEvent : Swift.RawRepresentable {}

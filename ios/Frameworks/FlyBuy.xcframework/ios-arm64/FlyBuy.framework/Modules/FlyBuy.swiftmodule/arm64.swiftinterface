// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FlyBuy
import CoreLocation
@_exported import FlyBuy
import Foundation
import SQLite3
import Swift
import UIKit
public struct AppConfig : Swift.Codable {
  public let data: FlyBuy.AppConfigData?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PickupLocationFilters : Swift.Codable {
  public let ios: [FlyBuy.PickupLocationFilterData]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class PickupLocationFilterData : Swift.Codable {
  final public let proximityToSite: Swift.Int
  final public let _desiredAccuracy: Swift.String
  final public let _activityType: Swift.String
  final public let distanceFilterCharging: Swift.Double
  final public let distanceFilterNotCharging: Swift.Double
  public init(proximityToSite: Swift.Int, desiredAccuracy: Swift.String, activityType: Swift.String, distanceFilterCharging: Swift.Double, distanceFilterNotCharging: Swift.Double)
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
extension PickupLocationFilterData {
  public static var defaultLocationFilter: FlyBuy.PickupLocationFilterData {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class NotifyConfig : ObjectiveC.NSObject, Swift.Codable {
  final public let beaconUUID: Foundation.UUID
  final public let defaultGeofenceRadiusMeters: Swift.Int
  final public let defaultSiteSearchRadiusMeters: Swift.Int
  final public let analyticsEventLimit: Swift.Int?
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc(FlyBuyCustomerConsent) open class CustomerConsent : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let termsOfService: Swift.Bool
  @objc final public let ageVerification: Swift.Bool
  @objc public init(termsOfService: Swift.Bool, ageVerification: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  open func encode(to encoder: Swift.Encoder) throws
}
@objc(FlyBuyUpdateOrderInfo) open class UpdateOrderInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(pushToken: Swift.String)
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  open func encode(to encoder: Swift.Encoder) throws
}
@objc open class CreateOrderInfo : ObjectiveC.NSObject, Swift.Codable {
  public init(siteID: Swift.Int, partnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, pushToken: Swift.String?, state: Swift.String?, pickupWindow: FlyBuy.PickupWindow? = nil, pickupType: Swift.String? = nil)
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  open func encode(to encoder: Swift.Encoder) throws
}
public struct BeaconIdentifiers : Swift.Hashable, Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: FlyBuy.BeaconIdentifiers, b: FlyBuy.BeaconIdentifiers) -> Swift.Bool
}
public struct Beacon {
}
extension Beacon : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @objc(FlyBuyBeaconList) public class BeaconList : ObjectiveC.NSObject {
  public var beacons: [FlyBuy.BeaconIdentifiers : FlyBuy.Beacon]
  public func addScan(identifiers ids: FlyBuy.BeaconIdentifiers, rssi: Swift.Int, distance: Swift.Float)
  public func addScan(_ beacon: CoreLocation.CLBeacon)
  public func addScans(_ scannedBeacons: [CoreLocation.CLBeacon])
  public func removeStale()
  public func asArray() -> [FlyBuy.Beacon]
  @objc deinit
  @objc override dynamic public init()
}
extension BeaconList : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension _AnyEncodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension _AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
@objc(FlyBuySite) open class Site : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let id: Swift.Int
  @objc final public let partnerIdentifier: Swift.String?
  @objc final public let name: Swift.String?
  @objc final public let phone: Swift.String?
  @objc final public let streetAddress: Swift.String?
  @objc final public let fullAddress: Swift.String?
  @objc final public let locality: Swift.String?
  @objc final public let region: Swift.String?
  @objc final public let country: Swift.String?
  @objc final public let postalCode: Swift.String?
  @objc final public let longitude: Swift.String?
  @objc final public let latitude: Swift.String?
  @objc final public let instructions: Swift.String?
  @objc final public let descriptionText: Swift.String?
  @objc final public let coverPhotoURL: Swift.String?
  @objc final public let projectAccentColor: Swift.String?
  @objc final public let projectAccentTextColor: Swift.String?
  @objc final public let projectLogoURL: Swift.String?
  @objc final public let geofence: FlyBuy.Geofence?
  @objc public func location() -> CoreLocation.CLLocation?
  @objc public func distance(from loc: CoreLocation.CLLocation) -> Foundation.NSNumber?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@objc(FlyBuyGeofence) open class Geofence : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let latitude: Swift.String
  @objc final public let longitude: Swift.String
  @objc final public let radiusMeters: Swift.Double
  public func locationCoordinate() -> CoreLocation.CLLocationCoordinate2D?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  open func encode(to encoder: Swift.Encoder) throws
}
@objc(FlyBuyCustomerInfo) open class CustomerInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let name: Swift.String
  @objc final public let carType: Swift.String?
  @objc final public let carColor: Swift.String?
  @objc final public let licensePlate: Swift.String?
  @objc final public let phone: Swift.String?
  @objc public init(name: Swift.String, carType: Swift.String?, carColor: Swift.String?, licensePlate: Swift.String?, phone: Swift.String? = nil)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
}
final public class PersistManager : FlyBuy.FlyBuyDBProtocol {
  public static let defaultDBPath: Swift.String
  public static var resetOnInit: Swift.Bool
  public static var shared: FlyBuy.PersistManager
  final public var dbManager: FlyBuy.FlyBuyDBManager
  final public var needsInit: Swift.Bool
  public init(atPath path: Swift.String = PersistManager.defaultDBPath)
  @objc deinit
}
@objc public enum LocationAuthStatus : Swift.Int, Swift.Codable {
  case notDetermined
  case restricted
  case denied
  case authorizedAlways
  case authorizedWhenInUse
  public init(from decoder: Swift.Decoder) throws
  public init?(from authStatus: CoreLocation.CLAuthorizationStatus)
  public init?(from string: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum HTTPStatusCode : Swift.Int, Swift.Error {
  case `continue`
  case switchingProtocols
  case processing
  case ok
  case created
  case accepted
  case nonAuthoritativeInformation
  case noContent
  case resetContent
  case partialContent
  case multiStatus
  case alreadyReported
  case IMUsed
  case multipleChoices
  case movedPermanently
  case found
  case seeOther
  case notModified
  case useProxy
  case switchProxy
  case temporaryRedirect
  case permenantRedirect
  case badRequest
  case unauthorized
  case paymentRequired
  case forbidden
  case notFound
  case methodNotAllowed
  case notAcceptable
  case proxyAuthenticationRequired
  case requestTimeout
  case conflict
  case gone
  case lengthRequired
  case preconditionFailed
  case payloadTooLarge
  case URITooLong
  case unsupportedMediaType
  case rangeNotSatisfiable
  case expectationFailed
  case teapot
  case misdirectedRequest
  case unprocessableEntity
  case locked
  case failedDependency
  case appUpgradeRequired
  case upgradeRequired
  case preconditionRequired
  case tooManyRequests
  case requestHeaderFieldsTooLarge
  case noResponse
  case unavailableForLegalReasons
  case SSLCertificateError
  case SSLCertificateRequired
  case HTTPRequestSentToHTTPSPort
  case clientClosedRequest
  case internalServerError
  case notImplemented
  case badGateway
  case serviceUnavailable
  case gatewayTimeout
  case HTTPVersionNotSupported
  case variantAlsoNegotiates
  case insufficientStorage
  case loopDetected
  case notExtended
  case networkAuthenticationRequired
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public typealias ResultType<T> = Swift.Result<T, Swift.Error>
public struct VoidResponse : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  case put
  case patch
  case delete
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum EncodingType {
  case url
  case json
  public static func == (a: FlyBuy.EncodingType, b: FlyBuy.EncodingType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol BaseApiRequest {
  var requestEndPoint: Swift.String { get }
  var requestType: FlyBuy.HTTPMethod { get }
  var encoding: FlyBuy.EncodingType { get }
  var headers: [Swift.String : Swift.String]? { get }
  var requestBody: Foundation.Data? { get }
}
extension BaseApiRequest {
  public var encoding: FlyBuy.EncodingType {
    get
  }
  public var requestBody: Foundation.Data? {
    get
  }
  public var headers: [Swift.String : Swift.String]? {
    get
  }
}
public protocol CodableRequest : FlyBuy.BaseApiRequest {
  associatedtype Response : Swift.Decodable
  associatedtype ErrorType : Swift.Decodable, Swift.Error
  var decoder: Foundation.JSONDecoder { get }
  var apiToken: Swift.String? { get }
  var queryParams: [Swift.String : Swift.String]? { get }
}
extension CodableRequest {
  public typealias ErrorType = FlyBuy.RuntimeError
  public var decoder: Foundation.JSONDecoder {
    get
  }
  public var apiToken: Swift.String? {
    get
  }
  public var queryParams: [Swift.String : Swift.String]? {
    get
  }
}
open class EncodableRequest<EncodableObject> where EncodableObject : Swift.Encodable {
  final public let object: EncodableObject
  final public let encoder: Foundation.JSONEncoder
  public init(object: EncodableObject, encoder: Foundation.JSONEncoder = JSONEncoder.iso8601FullLocalTZ)
  public var requestBody: Foundation.Data? {
    get
  }
  @objc deinit
}
extension BaseApiRequest {
  public var latestApi: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(FlyBuyPagination) public class Pagination : ObjectiveC.NSObject {
  @objc final public let currentPage: Swift.Int
  @objc final public let totalPages: Swift.Int
  @objc deinit
  @objc override dynamic public init()
}
@objc(FlyBuyClaimOrderInfo) open class ClaimOrderInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(customerCarColor: Swift.String?, customerCarType: Swift.String?, customerLicensePlate: Swift.String?, customerName: Swift.String?, customerPhone: Swift.String?, pushToken: Swift.String)
  @objc public init(customerInfo: FlyBuy.CustomerInfo, pushToken: Swift.String, pickupType: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
}
@objc(FlyBuyOrderEvent) open class OrderEvent : ObjectiveC.NSObject, Swift.Encodable {
  public init(orderID: Swift.Int, location: CoreLocation.CLLocation, beacons: [FlyBuy.Beacon], etaSeconds: Foundation.NSNumber?)
  @objc public init(orderID: Swift.Int, customerState: Swift.String, etaSeconds: Foundation.NSNumber?)
  @objc public init(orderID: Swift.Int, customerState: Swift.String, spotIdentifier: Swift.String?)
  @objc public init(orderID: Swift.Int, state: Swift.String)
  @objc public init(orderID: Swift.Int, locationAuthStatus: FlyBuy.LocationAuthStatus)
  @objc public init(orderID: Swift.Int, customerRating: Swift.Int, customerComments: Swift.String?)
  @objc deinit
  @objc override dynamic public init()
  open func encode(to encoder: Swift.Encoder) throws
}
public struct AppConfigData : Swift.Codable {
  public let pickupLocationFilters: FlyBuy.PickupLocationFilters?
  public let pickupStates: FlyBuy.PickupStates?
  public let notifyMaxSites: Swift.Int?
  public let nearbySitesFeatureUrl: Swift.String?
  public let upgrade: FlyBuy.AppUpgrade?
  public let notify: FlyBuy.NotifyConfig?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
open class BaseAPIService {
  public init()
  public func execute<Request>(_ request: Request, withCompletion completion: @escaping (FlyBuy.ResultType<Request.Response>) -> Swift.Void) where Request : FlyBuy.CodableRequest
  @objc deinit
}
public struct BeaconRegion : Swift.Codable, Swift.Hashable {
  public let uuid: Foundation.UUID
  public let major: Swift.UInt16?
  public let minor: Swift.UInt16?
  public func region() -> CoreLocation.CLBeaconRegion
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: FlyBuy.BeaconRegion, b: FlyBuy.BeaconRegion) -> Swift.Bool
}
public protocol FlyBuyModuleManager {
  func configUpdated(_ config: FlyBuy.AppConfig)
  func set(logLevel: FlyBuy.LogLevel)
  func ordersUpdated(_ orders: [FlyBuy.Order])
}
extension FlyBuyModuleManager {
  public func ordersUpdated(_ orders: [FlyBuy.Order])
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(FlyBuyCore) public class Core : ObjectiveC.NSObject {
  @objc public static let orders: FlyBuy.OrdersManager
  @objc public static let customer: FlyBuy.CustomerManager
  @objc public static let sites: FlyBuy.SitesManager
  @objc public static let config: FlyBuy.ConfigurationManager
  @objc public static let logger: FlyBuy.Logger
  public static var isCoreConfigured: Swift.Bool
  @objc public static func configure(_ opts: [Swift.String : Any])
  public static func appInstanceID() -> Foundation.UUID
  @objc public static func handleRemoteNotification(_ data: [Swift.AnyHashable : Any])
  @objc public static func updatePushToken(_ newPushToken: Swift.String)
  @objc public static func updateAPNPushToken(_ deviceToken: Foundation.Data)
  public static func cancelRunningURLSessions()
  @objc deinit
}
public struct RuntimeError : Swift.Error, Swift.Codable {
  public var localizedDescription: Swift.String {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Error {
  public var message: Swift.String {
    get
  }
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension _AnyDecodable {
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc(FlyBuyRequestPasswordReset) open class RequestPasswordReset : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  open func encode(to encoder: Swift.Encoder) throws
}
@objc(FlyBuySetNewPassword) open class SetNewPassword : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(resetPasswordToken: Swift.String, password: Swift.String, confirmation: Swift.String)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
}
final public class FlyBuyDBManager {
  final public var dbVersion: Swift.Int {
    get
    set
  }
  public init(atPath path: Swift.String)
  final public func fetchAll<T>(_ type: [T].Type) throws -> [T] where T : FlyBuy.PersistableCodable
  final public func fetch<T>(_ type: [T].Type, using sql: Swift.String) throws -> [T] where T : FlyBuy.PersistableCodable
  final public func save<T>(_ value: T) throws where T : FlyBuy.PersistableCodable
  final public func deleteAll<T>(_ type: T.Type) throws where T : FlyBuy.PersistableCodable
  final public func execute(raw: Swift.String) throws
  @objc deinit
}
public protocol FlyBuyDBProtocol {
  var dbManager: FlyBuy.FlyBuyDBManager { get }
}
extension FlyBuyDBProtocol {
  public func fetchAll<T>(_ type: [T].Type) throws -> [T] where T : FlyBuy.PersistableCodable
  public func fetch<T>(_ type: [T].Type, using sql: Swift.String) throws -> [T] where T : FlyBuy.PersistableCodable
  public func save<T>(_ value: T) throws where T : FlyBuy.PersistableCodable
  public func deleteAll<T>(_ type: T.Type) throws where T : FlyBuy.PersistableCodable
  public func execute(sql: Swift.String) throws
  public func dbClose()
}
public protocol PersistableCodable : Swift.Decodable, Swift.Encodable {
  static var createTable: Swift.String { get }
  static var upsert: Swift.String { get }
  static var fetchAll: Swift.String { get }
  static var deleteAll: Swift.String { get }
}
extension PersistableCodable {
  public static func fetchAll(persistManager: FlyBuy.FlyBuyDBProtocol = PersistManager.shared) throws -> [Self]
  public func save(persistManager: FlyBuy.FlyBuyDBProtocol = PersistManager.shared) throws
  public static func deleteAll(persistManager: FlyBuy.FlyBuyDBProtocol = PersistManager.shared) throws
}
extension JSONDecoder {
  public static let iso8601Full: Foundation.JSONDecoder
}
extension JSONEncoder {
  public static let iso8601FullLocalTZ: Foundation.JSONEncoder
}
extension DateFormatter {
  public static let iso8601Full: Foundation.DateFormatter
  public static let iso8601FullLocalTZ: Foundation.DateFormatter
}
@_hasMissingDesignatedInitializers @objc(FlyBuyCustomer) open class Customer : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let token: Swift.String
  @objc final public let emailAddress: Swift.String?
  @objc final public let info: FlyBuy.CustomerInfo
  @objc public var registered: Swift.Bool {
    @objc get
  }
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(FlyBuyConfigurationManager) public class ConfigurationManager : ObjectiveC.NSObject {
  public func fetch(forceFetch: Swift.Bool = false)
  @objc override dynamic public init()
  @objc deinit
}
public protocol FlyBuyError : Foundation.LocalizedError {
  var description: Swift.String { get }
  var errorDescription: Swift.String? { get }
}
@objc public enum FlyBuyAPIErrorType : Swift.Int {
  case invalidResponse
  case responseError
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(FlyBuyAPIError) public class FlyBuyAPIError : ObjectiveC.NSObject, FlyBuy.FlyBuyError {
  @objc final public let type: FlyBuy.FlyBuyAPIErrorType
  @objc final public let statusCodeInt: Swift.Int
  final public let statusCode: FlyBuy.HTTPStatusCode?
  public var errorDescription: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc(FlyBuyPickupWindow) public class PickupWindow : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let start: Foundation.Date
  @objc final public let end: Foundation.Date
  @objc public init(start: Foundation.Date, end: Foundation.Date)
  @objc convenience public init(_ date: Foundation.Date)
  required convenience public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc public func formattedString(locale: Foundation.Locale = Locale.current) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(FlyBuySitesManager) open class SitesManager : ObjectiveC.NSObject {
  @objc public var all: [FlyBuy.Site]? {
    get
  }
  @objc public func fetch(query: Swift.String? = nil, page: Swift.Int = 1, callback: (([FlyBuy.Site]?, FlyBuy.Pagination?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func fetch(region: CoreLocation.CLCircularRegion, page: Swift.Int = 1, callback: (([FlyBuy.Site]?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func fetch(region: CoreLocation.CLCircularRegion, page: Swift.Int, per: Swift.Int, callback: (([FlyBuy.Site]?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func fetchAll(query: Swift.String? = nil, callback: (([FlyBuy.Site]?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FlyBuySitesManagerError) public class SitesManagerError : ObjectiveC.NSObject, FlyBuy.FlyBuyError {
  @objc deinit
  @objc override dynamic public init()
}
public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension AnyCodable : FlyBuy._AnyEncodable, FlyBuy._AnyDecodable {
}
extension AnyCodable : Swift.Equatable {
  public static func == (lhs: FlyBuy.AnyCodable, rhs: FlyBuy.AnyCodable) -> Swift.Bool
}
extension AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AnyCodable : Swift.ExpressibleByNilLiteral {
}
extension AnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension AnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension AnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension AnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension AnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension AnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension Optional where Wrapped == Swift.String {
  public var presence: Swift.String? {
    get
  }
}
extension String {
  public var wordsFromCamelCase: Swift.String {
    get
  }
  public var isBlank: Swift.Bool {
    get
  }
  public func removeDirectory()
}
@objc public class AppUpgrade : ObjectiveC.NSObject, Swift.Codable {
  final public let required: Swift.Bool
  final public let url: Swift.String
  final public let version: Swift.String
  final public let message: Swift.String
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PickupStates : Swift.Codable {
  public let order: [Swift.String]?
  public let openOrder: [Swift.String]?
  public let customer: [Swift.String]?
  public let openCustomer: [Swift.String]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @objc(FlyBuyOrdersManager) open class OrdersManager : ObjectiveC.NSObject {
  @objc public var all: [FlyBuy.Order] {
    @objc get
  }
  @objc public var open: [FlyBuy.Order] {
    @objc get
  }
  @objc public var closed: [FlyBuy.Order] {
    @objc get
  }
  @objc public var orderStates: [Swift.String]
  @objc public var customerStates: [Swift.String]
  @objc override dynamic public init()
  @objc public func fetch(callback: (([FlyBuy.Order]?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func fetch(withRedemptionCode redemptionCode: Swift.String, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func claim(withRedemptionCode redemptionCode: Swift.String, customerInfo: FlyBuy.CustomerInfo, pickupType: Swift.String? = nil, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func create(siteID: Swift.Int, partnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, pickupWindow: FlyBuy.PickupWindow? = nil, state: Swift.String, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))?)
  @objc public func create(siteID: Swift.Int, partnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, pickupWindow: FlyBuy.PickupWindow? = nil, state: Swift.String, pickupType: Swift.String? = nil, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))?)
  @objc public func create(siteID: Swift.Int, partnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, pickupWindow: FlyBuy.PickupWindow? = nil, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))?)
  @objc public func create(siteID: Swift.Int, partnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, pickupWindow: FlyBuy.PickupWindow? = nil, pickupType: Swift.String? = nil, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))?)
  @objc public func create(siteID: Swift.Int, partnerIdentifier: Swift.String, customerInfo: FlyBuy.CustomerInfo, state: Swift.String?, pickupType: Swift.String? = nil, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))?)
  public func event(info: FlyBuy.OrderEvent, callback: ((FlyBuy.Order?, Swift.Error?) -> ())? = nil)
  @objc public func updateCustomerState(orderID: Swift.Int, customerState: Swift.String, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func updateCustomerState(orderID: Swift.Int, customerState: Swift.String, spotIdentifier: Swift.String?, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func updateOrderState(orderID: Swift.Int, state: Swift.String, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func rateOrder(orderID: Swift.Int, rating: Swift.Int, comments: Swift.String? = nil, callback: ((FlyBuy.Order?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc deinit
}
extension NSNotification.Name {
  public static let ordersUpdated: Foundation.Notification.Name
  public static let ordersError: Foundation.Notification.Name
  public static let orderUpdated: Foundation.Notification.Name
  public static let orderEventError: Foundation.Notification.Name
}
@_hasMissingDesignatedInitializers @objc(FlyBuyOrdersManagerError) public class OrdersManagerError : ObjectiveC.NSObject, FlyBuy.FlyBuyError {
  public var errorDescription: Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(FlyBuyCustomerManager) public class CustomerManager : ObjectiveC.NSObject {
  @objc public var current: FlyBuy.Customer? {
    @objc get
  }
  @objc public func create(_ customerInfo: FlyBuy.CustomerInfo, termsOfService: Swift.Bool, ageVerification: Swift.Bool, callback: ((FlyBuy.Customer?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func create(_ customerInfo: FlyBuy.CustomerInfo, email: Swift.String, password: Swift.String, customerConsent: FlyBuy.CustomerConsent, callback: ((FlyBuy.Customer?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func update(_ customerInfo: FlyBuy.CustomerInfo, callback: ((FlyBuy.Customer?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func login(emailAddress: Swift.String, password: Swift.String, callback: ((FlyBuy.Customer?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func loginWithToken(token: Swift.String, callback: ((FlyBuy.Customer?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func signUp(emailAddress: Swift.String, password: Swift.String, callback: ((FlyBuy.Customer?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func requestNewPassword(emailAddress: Swift.String, callback: ((Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func setNewPassword(resetPasswordToken: Swift.String, password: Swift.String, confirmation: Swift.String, callback: ((FlyBuy.Customer?, Swift.Error?) -> (Swift.Void))? = nil)
  @objc public func logout()
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FlyBuyCustomerManagerError) public class CustomerManagerError : ObjectiveC.NSObject, FlyBuy.FlyBuyError {
  public var errorDescription: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum LogLevel : Swift.Int {
  case verbose
  case debug
  case info
  case warning
  case error
  case none
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(FlyBuyLogger) final public class Logger : ObjectiveC.NSObject {
  final public var logLevel: FlyBuy.LogLevel
  final public var writeEnabled: Swift.Bool
  public init(name: Swift.String = "FlyBuySDK")
  final public func verbose(_ message: Any = "", filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  final public func debug(_ message: Any = "", filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  final public func info(_ message: Any = "", filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  final public func warning(_ message: Any = "", filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  final public func error(_ message: Any = "", filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  @objc override dynamic public init()
  @objc deinit
}
public struct CustomerResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@objc(FlyBuySignUpInfo) open class SignUpInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let emailAddress: Swift.String
  @objc final public let password: Swift.String
  @objc final public let passwordConfirmation: Swift.String
  @objc public init(emailAddress: Swift.String, password: Swift.String, passwordConfirmation: Swift.String)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
}
@objc(FlyBuyLoginInfo) open class LoginInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let emailAddress: Swift.String
  @objc final public let password: Swift.String
  @objc public init(emailAddress: Swift.String, password: Swift.String)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
}
@objc(FlyBuyOrder) open class Order : ObjectiveC.NSObject {
  @objc final public let id: Swift.Int
  @objc final public let siteID: Swift.Int
  @objc public var state: Swift.String
  @objc public var customerState: Swift.String
  @objc final public let partnerIdentifier: Swift.String?
  @objc final public let redemptionCode: Swift.String?
  @objc final public let redeemedAt: Foundation.Date?
  @objc final public let displayName: Swift.String?
  @objc final public let pickupWindow: FlyBuy.PickupWindow?
  @objc public var pickupType: Swift.String?
  @objc public var etaAt: Foundation.Date?
  @objc public var completedAt: Foundation.Date?
  @objc public var createdAt: Foundation.Date?
  @objc public var updatedAt: Foundation.Date?
  @objc public var customerRating: Swift.String?
  @objc public var customerComment: Swift.String?
  @objc final public let siteName: Swift.String?
  @objc final public let sitePhone: Swift.String?
  @objc final public let siteStreetAddress: Swift.String?
  @objc final public let siteFullAddress: Swift.String?
  @objc final public let siteLocality: Swift.String?
  @objc final public let siteRegion: Swift.String?
  @objc final public let siteCountry: Swift.String?
  @objc final public let sitePostalCode: Swift.String?
  @objc final public let siteLongitude: Swift.String?
  @objc final public let siteLatitude: Swift.String?
  @objc final public let siteInstructions: Swift.String?
  @objc final public let siteDescription: Swift.String?
  @objc final public let siteCoverPhotoURL: Swift.String?
  final public let siteBeaconRegions: [FlyBuy.BeaconRegion]?
  @objc final public let sitePartnerIdentifier: Swift.String?
  @objc final public let projectAccentColor: Swift.String?
  @objc final public let projectAccentTextColor: Swift.String?
  @objc final public let projectLogoURL: Swift.String?
  @objc final public let customerName: Swift.String?
  @objc final public let customerCarType: Swift.String?
  @objc final public let customerCarColor: Swift.String?
  @objc final public let customerLicensePlate: Swift.String?
  @objc final public let projectMobileFlowAlwaysShowVehicleInfoFields: Swift.Bool
  @objc final public let projectMobileFlowCustomerNameEditingEnabled: Swift.Bool
  @objc final public let projectMobileFlowPickupTypeSelectionEnabled: Swift.Bool
  @objc final public let projectMobileFlowRequireVehicleInfoIfVisible: Swift.Bool
  @objc final public let curbsideLocalizedString: Swift.String?
  @objc final public let pickupLocalizedString: Swift.String?
  @objc public var pushToken: Swift.String?
  public var isLocationTrackingEnabled: Swift.Bool?
  public var spotIdentifierEntryEnabled: Swift.Bool?
  @objc public var spotIdentifer: Swift.String?
  @objc public var spotIdentifierInputType: Swift.String?
  @objc final public let partnerIdentifierForCustomer: Swift.String?
  @objc final public let partnerIdentifierForCrew: Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc public func siteLocation() -> CoreLocation.CLLocation?
  @objc public func siteDistance(from location: CoreLocation.CLLocation) -> Foundation.NSNumber?
  @objc public var customerID: Foundation.NSNumber? {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
extension Order : FlyBuy.PersistableCodable {
  public static var createTable: Swift.String {
    get
  }
  public static var upsert: Swift.String {
    get
  }
  public static var fetchAll: Swift.String {
    get
  }
  public static var deleteAll: Swift.String {
    get
  }
}
extension Order {
  public func isOpen() -> Swift.Bool
}
extension FlyBuy.LocationAuthStatus : Swift.Equatable {}
extension FlyBuy.LocationAuthStatus : Swift.Hashable {}
extension FlyBuy.LocationAuthStatus : Swift.RawRepresentable {}
extension FlyBuy.HTTPStatusCode : Swift.Equatable {}
extension FlyBuy.HTTPStatusCode : Swift.Hashable {}
extension FlyBuy.HTTPStatusCode : Swift.RawRepresentable {}
extension FlyBuy.HTTPMethod : Swift.Equatable {}
extension FlyBuy.HTTPMethod : Swift.Hashable {}
extension FlyBuy.HTTPMethod : Swift.RawRepresentable {}
extension FlyBuy.EncodingType : Swift.Equatable {}
extension FlyBuy.EncodingType : Swift.Hashable {}
extension FlyBuy.FlyBuyAPIErrorType : Swift.Equatable {}
extension FlyBuy.FlyBuyAPIErrorType : Swift.Hashable {}
extension FlyBuy.FlyBuyAPIErrorType : Swift.RawRepresentable {}
extension FlyBuy.LogLevel : Swift.Equatable {}
extension FlyBuy.LogLevel : Swift.Hashable {}
extension FlyBuy.LogLevel : Swift.RawRepresentable {}
